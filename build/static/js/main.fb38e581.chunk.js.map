{"version":3,"sources":["components/Style.js","components/Locale.js","components/User.js","components/Admin.js","components/HorizontalBarChart.js","components/DoughnutChart.js","components/Stats.js","components/Upload.js","components/Register.js","components/Login.js","components/NavBar.js","components/Routes.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","fontSize","flexWrap","title","flexGrow","cover","width","padding","margin","spacing","withoutLabel","marginTop","textField","GreenCheckbox","withStyles","color","green","checked","props","Checkbox","MenuButton","styled","Button","ExamButton","strings","LocalizedStrings","fi","kieli","tentit","tilastot","rekisteroidy","kirjaudu","tietoa","kayttaja","yllapitaja","poistu","etunimi","sukunimi","sahkoposti","salasana","rooli","nayta","vastaukset","esimerkki","kaavio","tiedostonlahetys","pudotatiedostot","valitsetiedostot","en","path","Error","reducer","state","action","tempCopy","JSON","parse","stringify","type","data","examIndex","kysymykset","cardIndex","vaihtoehdot","listItemIndex","vastaus","checkedValue","App","useState","showCorrectAnswers","setShowCorrectAnswers","currentExamIndex","setCurrentExamIndex","useReducer","dispatch","classes","useEffect","a","axios","get","tentit_data","length","i","id","kysymykset_taulu","kayttajan_vastaukset","j","vaihtoehdot_taulu","k","l","vaihtoehto_id","console","log","fetchData","valintaMuuttui","kysymys_id","exam_id","put","Box","CssBaseline","Container","style","marginBottom","maxWidth","component","Object","values","map","exam","name","nimi","onClick","uuid","card","Card","className","CardContent","content","List","whiteSpace","lause","listItem","ListItem","disabled","onChange","event","target","oikea_vastaus","overflow","textOverflow","vaihtoehto","cardChoisesArray","filter","choise","CardMedia","src","height","alt","marginRight","variant","getRandomInt","min","max","Math","floor","random","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","legend","scales","xAxes","ticks","yAxes","HorizontalBarChart","hoverBackgroundColor","DoughnutChart","Stats","Upload","Register","tempEtunimi","setTempEtunimi","tempSukunimi","setTempSukunimi","tempSahkoposti","setTempSahkoposti","tempSalasana","setTempSalasana","tempRooli","setTempRooli","addUser","post","salasana_hash","result","alert","message","Typography","paddingTop","Grid","container","item","xs","TextField","value","FormControl","InputLabel","htmlFor","OutlinedInput","labelWidth","FormLabel","RadioGroup","aria-label","FormControlLabel","control","Radio","Login","login","NavBar","setLanguage","getInterfaceLanguage","getLanguage","AppBar","position","Toolbar","href","Routes","exact","User","to","socket","io","on","emit","alert_data","payload","trigger","row","Swal","fire","html","suoritettu","aloitus","lopetus","minimipisteraja","timer","timerProgressBar","icon","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb38e581.chunk.js","sourcesContent":["import { Button, styled, withStyles, makeStyles, Checkbox } from '@material-ui/core'\r\nimport { green } from '@material-ui/core/colors'\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      fontSize: '0.875rem',\r\n      flexWrap: 'wrap',\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    cover: {\r\n      width: 50,\r\n      padding: 10,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n        width: '25ch',\r\n    },\r\n  }))\r\n\r\n  export const GreenCheckbox = withStyles({\r\n    root: {\r\n      color: green[400],\r\n      '&$checked': {\r\n        color: green[600],\r\n      },\r\n    },\r\n    checked: {},\r\n  })((props) => <Checkbox color=\"default\" {...props} />)\r\n  \r\n  export const MenuButton = styled(Button)({\r\n    color: '#fff',\r\n    padding: '6px 8px',\r\n    fontSize: '0.875rem',\r\n  })\r\n  \r\n  export const ExamButton = styled(Button)({\r\n    color: '#3f51b5',\r\n    padding: '6px 8px',\r\n  })","import LocalizedStrings from 'react-localization'\r\n\r\nexport let strings = new LocalizedStrings({\r\n    fi: {\r\n        kieli: \"kieli\",\r\n        tentit: \"tentit\",\r\n        tilastot: \"tilastot\",\r\n        rekisteroidy: \"rekisteröidy\",\r\n        kirjaudu: \"kirjaudu sisään\",\r\n        tietoa: \"tietoa\",\r\n        kayttaja: \"käyttäjä\",\r\n        yllapitaja: \"ylläpitäjä\",\r\n        poistu: \"kirjaudu ulos\",\r\n        etunimi: \"etunimi\",\r\n        sukunimi: \"sukunimi\",\r\n        sahkoposti: \"sähköposti\",\r\n        salasana: \"salasana\",\r\n        rooli: \"rooli\",\r\n        nayta: \"näytä\",\r\n        vastaukset: \"vastaukset\",\r\n        esimerkki: \"esimerkki\",\r\n        kaavio: \"kaavio\",\r\n        tiedostonlahetys: \"tiedoston lähetys\",\r\n        pudotatiedostot: \"Pudota tiedostot tähän\",\r\n        valitsetiedostot: \"tai klikkaa valitaksesi tiedostoja\"\r\n    },\r\n    en: {\r\n        kieli: \"language\",\r\n        tentit: \"exams\",\r\n        tilastot: \"statistics\",\r\n        rekisteroidy: \"sign in\",\r\n        kirjaudu: \"log in\",\r\n        tietoa: \"about\",\r\n        kayttaja: \"user\",\r\n        yllapitaja: \"admin\",\r\n        poistu: \"sign out\",\r\n        etunimi: \"first name\",\r\n        sukunimi: \"last name\",\r\n        sahkoposti: \"email\",\r\n        salasana: \"password\",\r\n        rooli: \"role\",\r\n        nayta: \"show\",\r\n        vastaukset: \"answers\",\r\n        esimerkki: \"example\",\r\n        kaavio: \"chart\",\r\n        tiedostonlahetys: \"upload file\",\r\n        pudotatiedostot: \"Drop the files here\",\r\n        valitsetiedostot: \"or click to select files\"\r\n    }\r\n})","import { React, useState, useEffect, useReducer } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { useStyles, GreenCheckbox, ExamButton } from './Style'\r\nimport axios from 'axios'\r\nimport {\r\n    Card, CardContent, CardMedia, Container, Button,\r\n    List, ListItem, Box, Checkbox, CssBaseline\r\n} from '@material-ui/core'\r\nimport { strings } from './Locale'\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nfunction reducer(state, action) {\r\n\r\n    let tempCopy = JSON.parse(JSON.stringify(state))\r\n\r\n    switch (action.type) {\r\n\r\n        case \"checked_changed\":\r\n            tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                .vaihtoehdot[action.data.listItemIndex].vastaus = action.data.checkedValue\r\n            return tempCopy\r\n\r\n        case \"INIT_DATA\":\r\n            return action.data\r\n\r\n        default:\r\n            throw new Error()\r\n\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const [showCorrectAnswers, setShowCorrectAnswers] = useState(false)\r\n    const [currentExamIndex, setCurrentExamIndex] = useState(-1)\r\n    const [state, dispatch] = useReducer(reducer, [])\r\n    const classes = useStyles()\r\n    const currentKurssiIndex = 1\r\n    const currentUserIndex = 1\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                let tentit_data = await axios.get(path + \"kayttajan_tentit/\" + currentUserIndex)\r\n                let tentit = tentit_data.data\r\n\r\n                if (tentit.length > 0) {\r\n                    // käydään tentit läpi\r\n                    for (var i = 0; i < tentit.length; i++) {\r\n                        // haetaan tentin kysymykset\r\n                        tentit[i].kysymykset = []\r\n                        let kysymykset_taulu = await axios.get(path + \"tentin_kysymykset/\" + tentit[i].id)\r\n                        tentit[i].kysymykset = kysymykset_taulu.data\r\n                        // haetaan kayttajan_vastaukset\r\n                        let kayttajan_vastaukset =\r\n                            await axios.get(path + \"kayttajan_vastaukset/\"\r\n                                + currentUserIndex + \"/\" + tentit[i].id)\r\n                        // käydään tentin kysymykset läpi\r\n                        for (var j = 0; j < tentit[i].kysymykset.length; j++) {\r\n                            // haetaan kysymyksen vaihtoehdot\r\n                            tentit[i].kysymykset[j].vaihtoehdot = []\r\n                            let vaihtoehdot_taulu =\r\n                                await axios.get(path + \"kysymyksen_vaihtoehdot/\" + tentit[i].kysymykset[j].id)\r\n                            tentit[i].kysymykset[j].vaihtoehdot = vaihtoehdot_taulu.data\r\n                            // käydään kayttajan_vastaukset läpi\r\n                            for (var k = 0; k < tentit[i].kysymykset[j].vaihtoehdot.length; k++) {\r\n                                for (var l = 0; l < kayttajan_vastaukset.data.length; l++) {\r\n                                    if (tentit[i].kysymykset[j].vaihtoehdot[k].id === kayttajan_vastaukset.data[l].vaihtoehto_id) {\r\n                                        tentit[i].kysymykset[j].vaihtoehdot[k]\r\n                                            .vastaus = kayttajan_vastaukset.data[l].vastaus\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({ type: \"INIT_DATA\", data: tentit })\r\n                } else {\r\n                    throw console.log(\"Dataa ei saatu palvelimelta.\")\r\n                }\r\n            }\r\n            catch (exception) {\r\n                console.log(exception)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const valintaMuuttui = async (kysymys_id, checkedValue, vaihtoehto_id, listItemIndex, exam_id) => {\r\n        try {\r\n            // /paivita_valinta/:kayttaja_id/:vaihtoehto_id/:tentti_id/:kurssi_id/:vastaus\r\n            await axios.put(path + \"paivita_valinta/\"\r\n                + currentUserIndex + \"/\"\r\n                + vaihtoehto_id + \"/\"\r\n                + exam_id + \"/\"\r\n                + currentKurssiIndex + \"/\"\r\n                + checkedValue)\r\n        } catch (exception) {\r\n            console.log(\"Datan päivitäminen ei onnistunut.\")\r\n        }\r\n        dispatch({\r\n            type: \"checked_changed\",\r\n            data: {\r\n                examIndex: currentExamIndex,\r\n                cardIndex: kysymys_id,\r\n                listItemIndex: listItemIndex,\r\n                checkedValue: checkedValue\r\n            }\r\n        })\r\n    }\r\n\r\n    const currentExamIndexChanged = (value) => {\r\n        setCurrentExamIndex(value)\r\n        setShowCorrectAnswers(false)\r\n    }\r\n\r\n    const allCorrect = (cardChoisesArray) => {\r\n        return (cardChoisesArray.filter(choise => choise.vastaus\r\n            === choise.oikea_vastaus).length === cardChoisesArray.length)\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <CssBaseline />\r\n            <Container key=\"container1_user\" style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                component=\"main\">\r\n                {Object.values(state).map((exam, examIndex) =>\r\n                    <ExamButton style={{ marginTop: \"10px\" }} key={uuid()} name={exam.nimi} onClick={() => currentExamIndexChanged(examIndex)}>\r\n                        {exam.nimi}\r\n                    </ExamButton>\r\n                )}\r\n                {currentExamIndex >= 0 &&\r\n                    (\r\n                        <>\r\n                            <h2>{state[currentExamIndex].nimi}</h2>\r\n                            {Object.values(state[currentExamIndex].kysymykset)\r\n                                .map((card, cardIndex) =>\r\n                                    <Card style={{ marginTop: \"10px\" }} key={uuid()} className={classes.root}>\r\n                                        <CardContent style={{ width: \"100%\" }} className={classes.content}>\r\n                                            <List>\r\n                                                <p className=\"label\" style={{ whiteSpace: \"pre-wrap\" }}>\r\n                                                    {card.lause}\r\n                                                </p>\r\n                                                {Object.values(card.vaihtoehdot).map((listItem, listItemIndex) => (\r\n                                                    <ListItem key={uuid()}>\r\n                                                        <Checkbox checked={listItem.vastaus} disabled={showCorrectAnswers}\r\n                                                            onChange={(event) => {\r\n                                                                valintaMuuttui(cardIndex, event.target.checked, listItem.id, listItemIndex, state[currentExamIndex].id)\r\n                                                            }}\r\n                                                        />\r\n                                                        {showCorrectAnswers && <GreenCheckbox disabled checked={listItem.oikea_vastaus} color=\"primary\" />}\r\n                                                        <p style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\r\n                                                            {listItem.vaihtoehto}\r\n                                                        </p>\r\n                                                    </ListItem>\r\n                                                ))}\r\n                                            </List>\r\n                                        </CardContent>\r\n                                        {(showCorrectAnswers && (allCorrect(Object.values(card.vaihtoehdot))) ? (\r\n                                            <CardMedia className={classes.cover}>\r\n                                                <img className=\"image\" src=\"/images/selma.png\"\r\n                                                    height=\"30px\" width=\"30px\" alt=\"Selma\" />\r\n                                            </CardMedia>\r\n                                        ) : (null))}\r\n                                    </Card>\r\n                                )\r\n                            }\r\n\r\n                            <Button style={{ marginTop: \"10px\", marginRight: \"10px\" }} name=\"vastaukset\" variant=\"contained\" color=\"primary\"\r\n                                onClick={() => (\r\n                                    (showCorrectAnswers ? setShowCorrectAnswers(false) : setShowCorrectAnswers(true))\r\n                                )}>{strings.nayta} {strings.vastaukset}</Button>\r\n                        </>\r\n                    )\r\n                }\r\n            </Container>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default App","import { React, useState, useEffect, useReducer } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { useStyles, /* GreenCheckbox, */ ExamButton } from './Style'\r\nimport axios from 'axios'\r\nimport {\r\n    Card, CardContent, CardMedia, Container, Button,\r\n    List, ListItem, Box, /* Checkbox, */ Icon, IconButton, \r\n    CssBaseline, Dialog, DialogTitle, DialogContent,\r\n    TextField\r\n} from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nfunction reducer(state, action) {\r\n\r\n    let tempCopy = JSON.parse(JSON.stringify(state))\r\n\r\n    switch (action.type) {\r\n\r\n        case \"add_choise\":\r\n            let newChoise = { choise: \"\", checked: false, correctAnswer: false }\r\n            tempCopy[action.data.examIndex].cards[action.data.cardIndex].choises\r\n                .push(newChoise)\r\n            return tempCopy\r\n\r\n        case \"add_card\":\r\n            let newCard = {\r\n                label: \"\", choises: [{ choise: \"\", checked: false, correctAnswer: false }]\r\n            }\r\n            tempCopy[action.data.examIndex].cards[action.data.cardIndex].cards\r\n                .push(newCard)\r\n            return tempCopy\r\n\r\n        case \"card_label_changed\":\r\n            tempCopy[action.data.examIndex].cards[action.data.cardIndex].label =\r\n                action.data.newCardLabel\r\n            return tempCopy\r\n\r\n        case \"card_deleted\":\r\n            tempCopy[action.data.examIndex].cards[action.data.cardIndex].cards\r\n                .splice(action.data.cardIndex, 1)\r\n            return tempCopy\r\n\r\n        case \"add_exam\":\r\n            let newExam = [\r\n                {\r\n                    uuid: uuid(),\r\n                    name: action.data.examName,\r\n                    cards: [\r\n                        {\r\n                            label: \"\",\r\n                            choises: [\r\n                                { choise: \"\", checked: false, correctAnswer: false }\r\n                            ]\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n            action.data.handle_close()\r\n            tempCopy.push(newExam)\r\n            return tempCopy\r\n\r\n        case \"checked_changed\":\r\n            tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                .vaihtoehdot[action.data.listItemIndex].vastaus = action.data.checkedValue\r\n            return tempCopy\r\n\r\n        case \"choise_changed\":\r\n            tempCopy[action.data.examIndex].cards[action.data.cardIndex]\r\n                .choises[action.data.listItemIndex].choise = action.data.newChoise\r\n            return tempCopy\r\n\r\n        case \"choise_deleted\":\r\n            tempCopy[action.data.examIndex].cards[action.data.cardIndex]\r\n                .choises.splice(action.data.listItemIndex, 1)\r\n            return tempCopy\r\n\r\n        case \"answer_changed\":\r\n            tempCopy[action.data.examIndex].cards[action.data.cardIndex]\r\n                .choises[action.data.listItemIndex].correctAnswer\r\n                = action.data.checkedValue\r\n            return tempCopy\r\n\r\n        case \"INIT_DATA\":\r\n            return action.data\r\n\r\n        default:\r\n            throw new Error()\r\n\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const [showCorrectAnswers, setShowCorrectAnswers] = useState(false)\r\n    const [currentExamIndex, setCurrentExamIndex] = useState(-1)\r\n    const [state, dispatch] = useReducer(reducer, [])\r\n    const [examName, setExamName] = useState(\"\")\r\n    const [open, setOpen] = useState(false)\r\n    const classes = useStyles()\r\n    /* const currentKurssiIndex = 1 */\r\n    const currentUserIndex = 1\r\n\r\n    useEffect(() => {\r\n\r\n        /* const createData = async () => {\r\n            try {\r\n                await axios.post(path+\"tentit\", initialData)\r\n                dispatch({ type: \"INIT_DATA\", data: initialData })\r\n                setdataInitialized(true)\r\n            } catch (exception) {\r\n                console.log(\"Tietokannan alustaminen epäonnistui.\")\r\n            }\r\n        } */\r\n\r\n        const fetchData = async () => {\r\n            try {\r\n                let tentit_data = await axios.get(path+\"kayttajan_tentit/\" + currentUserIndex)\r\n                let tentit = tentit_data.data\r\n                /* console.log(\"Käyttäjä \" + currentUserIndex + \" kirjautuneena.\") */\r\n\r\n                if (tentit.length > 0) {\r\n                    // käydään tentit läpi\r\n                    for (var i = 0; i < tentit.length; i++) {\r\n                        // haetaan tentin kysymykset\r\n                        tentit[i].kysymykset = []\r\n                        let kysymykset_taulu = await axios.get(path+\"tentin_kysymykset/\" + tentit[i].id)\r\n                        tentit[i].kysymykset = kysymykset_taulu.data\r\n                        // haetaan kayttajan_vastaukset\r\n                        let kayttajan_vastaukset =\r\n                            await axios.get(path+\"kayttajan_vastaukset/\"\r\n                                + currentUserIndex + \"/\" + tentit[i].id)\r\n                        // käydään tentin kysymykset läpi\r\n                        for (var j = 0; j < tentit[i].kysymykset.length; j++) {\r\n                            // haetaan kysymyksen vaihtoehdot\r\n                            tentit[i].kysymykset[j].vaihtoehdot = []\r\n                            let vaihtoehdot_taulu =\r\n                                await axios.get(path+\"kysymyksen_vaihtoehdot/\" + tentit[i].kysymykset[j].id)\r\n                            tentit[i].kysymykset[j].vaihtoehdot = vaihtoehdot_taulu.data\r\n                            // käydään kayttajan_vastaukset läpi\r\n                            for (var k = 0; k < tentit[i].kysymykset[j].vaihtoehdot.length; k++) {\r\n                                for (var l = 0; l < kayttajan_vastaukset.data.length; l++) {\r\n                                    if (tentit[i].kysymykset[j].vaihtoehdot[k].id === kayttajan_vastaukset.data[l].vaihtoehto_id) {\r\n                                        tentit[i].kysymykset[j].vaihtoehdot[k]\r\n                                            .vastaus = kayttajan_vastaukset.data[l].vastaus\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    dispatch({ type: \"INIT_DATA\", data: tentit })\r\n                    /* console.log(tentit) */\r\n                } else {\r\n                    throw console.log(\"Dataa ei saatu palvelimelta.\")\r\n                }\r\n            }\r\n            catch (exception) {\r\n                console.log(exception)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n   /*  useEffect(() => {\r\n\r\n        const updateData = async () => {\r\n            try {\r\n                await axios.put(path+\"tentit\", state)\r\n            } catch (exception) {\r\n                console.log(\"Datan päivitäminen ei onnistunut.\")\r\n            }\r\n            finally {\r\n\r\n            }\r\n        }\r\n\r\n        if (dataInitialized) {\r\n            updateData()\r\n        }\r\n    }, [state, dataInitialized]) */\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    /* const valintaMuuttui = async (kysymys_id, checkedValue, vaihtoehto_id, listItemIndex, exam_id) => {\r\n        try {\r\n            // /paivita_valinta/:kayttaja_id/:vaihtoehto_id/:tentti_id/:kurssi_id/:vastaus\r\n            console.log(vaihtoehto_id)\r\n            await axios.put(path+\"paivita_valinta/\"\r\n                + currentUserIndex + \"/\"\r\n                + vaihtoehto_id + \"/\"\r\n                + exam_id + \"/\"\r\n                + currentKurssiIndex + \"/\"\r\n                + checkedValue)\r\n        } catch (exception) {\r\n            console.log(\"Datan päivitäminen ei onnistunut.\")\r\n        }\r\n        dispatch({\r\n            type: \"checked_changed\",\r\n            data: {\r\n                examIndex: currentExamIndex,\r\n                cardIndex: kysymys_id,\r\n                listItemIndex: listItemIndex,\r\n                checkedValue: checkedValue\r\n            }\r\n        })\r\n    } */\r\n\r\n    const currentExamIndexChanged = (value) => {\r\n        /* console.log(value) */\r\n        setCurrentExamIndex(value)\r\n        setShowCorrectAnswers(false)\r\n    }\r\n\r\n    const allCorrect = (cardChoisesArray) => {\r\n        /* console.log(cardChoisesArray.filter(choise => choise.vastaus\r\n            === choise.oikea_vastaus).length, cardChoisesArray.length) */\r\n        return (cardChoisesArray.filter(choise => choise.vastaus\r\n            === choise.oikea_vastaus).length === cardChoisesArray.length)\r\n    }\r\n\r\n    return (\r\n        <Box>\r\n            <CssBaseline />\r\n            <Container key=\"container1_admin\" style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                component=\"main\">\r\n                {Object.values(state).map((exam, examIndex) =>\r\n                    <ExamButton style={{ marginTop: \"10px\" }} key={uuid()} name={exam.nimi} onClick={() => currentExamIndexChanged(examIndex)}>\r\n                        {/* {exam.nimi + \"(exam.id=\" + exam.id + \", examIndex=\" + examIndex + \")\"} */}\r\n                        {exam.nimi}\r\n                    </ExamButton>\r\n                )}\r\n                <IconButton onClick={handleClickOpen}>\r\n                    <Icon>add_circle</Icon>\r\n                </IconButton>\r\n                <Dialog open={open} onClose={handleClose}\r\n                    aria-labelledby=\"form-dialog-title\">\r\n                    <DialogTitle id=\"form-dialog-title\">Lisää uusi tentti</DialogTitle>\r\n                    <DialogContent>\r\n                        {/* TextField, defaultValue, onBlur = toimii */}\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            id=\"examName\"\r\n                            label=\"Tentin nimi\"\r\n                            type=\"exam\"\r\n                            fullWidth\r\n                            value={examName}\r\n                            onChange={(event) => setExamName(event.target.value)}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Peruuta\r\n                      </Button>\r\n                        <Button style={{ marginTop: \"10px\" }} onClick={() => dispatch(\r\n                            {\r\n                                type: \"add_exam\", data: {\r\n                                    examName: examName,\r\n                                    handle_close: handleClose\r\n                                }\r\n                            }\r\n                        )} color=\"primary\">\r\n                            Lisää tentti\r\n                      </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                {currentExamIndex >= 0 &&\r\n                    (\r\n                        <>\r\n                            <h2>{state[currentExamIndex].nimi + \" (exam.id = \" + state[currentExamIndex].id + \")\"}</h2>\r\n                            {Object.values(state[currentExamIndex].kysymykset)\r\n                                .map((card, cardIndex) =>\r\n                                    <Card style={{ marginTop: \"10px\" }} key={uuid()} className={classes.root}>\r\n                                        <CardContent style={{ width: \"100%\" }} className={classes.content}>\r\n                                            <List>\r\n                                                {/* <p className=\"label\" style={{ whiteSpace: \"pre-wrap\" }}>\r\n                                                    {card.lause + \" (exam.id = \" + state[currentExamIndex].id + \")\"}\r\n                                                </p> */}\r\n                                                <TextField key={uuid()} style={{\r\n                                                    overflow: \"hidden\",\r\n                                                    textOverflow: \"ellipsis\"\r\n                                                }}\r\n                                                    onChange={(event) => dispatch({\r\n                                                        type: \"card_label_changed\",\r\n                                                        data: {\r\n                                                            newCardLabel: event.target.value,\r\n                                                            examIndex: currentExamIndex,\r\n                                                            cardIndex: cardIndex\r\n                                                        }\r\n                                                    })}\r\n                                                    value={card.label} />\r\n                                                <IconButton key={uuid()} style={{ float: \"right\" }} label=\"delete\"\r\n                                                    color=\"primary\" onClick={() => dispatch(\r\n                                                        {\r\n                                                            type: \"card_deleted\", data: {\r\n                                                                examIndex: currentExamIndex,\r\n                                                                cardIndex: cardIndex\r\n                                                            }\r\n                                                        }\r\n                                                    )}>\r\n                                                    <DeleteIcon />\r\n                                                </IconButton >\r\n                                                {Object.values(card.vaihtoehdot).map((listItem, listItemIndex) => (\r\n                                                    <ListItem key={uuid()}> {/* (listItem.vastaus === undefined)?false: */}\r\n                                                        <TextField key={uuid()} style={{\r\n                                                            minWidth: \"600px\", overflow: \"hidden\",\r\n                                                            textOverflow: \"ellipsis\"\r\n                                                        }} value={listItem.choise}\r\n                                                            onChange={(event) => dispatch(\r\n                                                                {\r\n                                                                    type: \"choise_changed\", data: {\r\n                                                                        examIndex: currentExamIndex,\r\n                                                                        cardIndex: cardIndex,\r\n                                                                        listItemIndex: listItemIndex,\r\n                                                                        newChoise: event.target.value\r\n                                                                    }\r\n                                                                }\r\n                                                            )} />\r\n                                                        <IconButton style={{ float: \"right\" }} label=\"delete\" color=\"primary\"\r\n                                                            onClick={() => dispatch(\r\n                                                                {\r\n                                                                    type: \"choise_deleted\", data: {\r\n                                                                        examIndex: currentExamIndex,\r\n                                                                        cardIndex: cardIndex,\r\n                                                                        listItemIndex: listItemIndex\r\n                                                                    }\r\n                                                                }\r\n                                                            )}>\r\n                                                            <DeleteIcon /></IconButton >\r\n                                                        {/* {console.log(listItem)} */}\r\n                                                        {/* <Checkbox checked={listItem.vastaus} disabled={showCorrectAnswers}\r\n                                                            onChange={(event) => {\r\n                                                                valintaMuuttui(cardIndex, event.target.checked, listItem.id, listItemIndex, state[currentExamIndex].id)\r\n                                                            }}\r\n                                                        />\r\n                                                        {showCorrectAnswers && <GreenCheckbox disabled checked={listItem.oikea_vastaus} color=\"primary\" />}\r\n                                                        <p style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\r\n                                                            {listItem.vaihtoehto}\r\n                                                        </p> */}\r\n                                                    </ListItem>\r\n                                                ))}\r\n                                                <IconButton onClick={() => dispatch({\r\n                                                    type: \"add_choise\",\r\n                                                    data: { cardIndex: cardIndex }\r\n                                                })}>\r\n                                                    <Icon>add_circle</Icon>\r\n                                                </IconButton>\r\n                                            </List>\r\n                                        </CardContent>\r\n                                        {(showCorrectAnswers && (allCorrect(Object.values(card.vaihtoehdot))) ? (\r\n                                            <CardMedia className={classes.cover}>\r\n                                                <img className=\"image\" src=\"/images/selma.png\"\r\n                                                    height=\"30px\" width=\"30px\" alt=\"Selma\" />\r\n                                            </CardMedia>\r\n                                        ) : (null))}\r\n                                    </Card>\r\n                                )\r\n                            }\r\n                            < IconButton style={{ float: \"right\" }}\r\n                                onClick={() => dispatch({ type: \"add_card\" })}>\r\n                                <Icon>add_circle</Icon>\r\n                            </IconButton>\r\n                            <Button style={{ marginTop: \"10px\", marginRight: \"10px\" }} name=\"vastaukset\" variant=\"contained\" color=\"primary\"\r\n                                onClick={() => (\r\n                                    (showCorrectAnswers ? setShowCorrectAnswers(false) : setShowCorrectAnswers(true))\r\n                                )}>Näytä vastaukset</Button>\r\n                        </>\r\n                    )\r\n                }\r\n            </Container>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport { HorizontalBar } from 'react-chartjs-2'\r\nimport { strings } from './Locale'\r\n\r\nfunction getRandomInt (min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nconst data = {\r\n    labels: ['kivi', 'magmakivilajit', 'metaforiset kivilajit', 'javascript'],\r\n    datasets: [\r\n        {\r\n            label: '# oikeista vastauksista',\r\n            data: [getRandomInt(1, 10), getRandomInt(1, 10), getRandomInt(1, 10), getRandomInt(1, 10)],\r\n            backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n            ],\r\n            borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n        },\r\n    ],\r\n}\r\n\r\nconst options = {\r\n    legend: {\r\n      display: true\r\n    },\r\n    scales: {\r\n      xAxes: [{\r\n        display: true,\r\n        ticks: {\r\n          min: 0\r\n        }\r\n      }],\r\n      yAxes: [{\r\n        display: true\r\n      }],\r\n    }\r\n  }\r\n\r\nconst HorizontalBarChart = () => (\r\n    <>\r\n        <div className='header'>\r\n            <h1 className='title'>1. {strings.esimerkki} {strings.kaavio}</h1>\r\n        </div>\r\n        <HorizontalBar data={data} options={options} />\r\n    </>\r\n)\r\n\r\nexport default HorizontalBarChart","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport { strings } from './Locale'\r\n\r\nfunction getRandomInt (min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nconst data = {\r\n  labels: ['kivi', 'magmakivilajit', 'metaforiset kivilajit', 'javascript'],\r\n  datasets: [{\r\n    data: [getRandomInt(1, 3), getRandomInt(3, 5), getRandomInt(5, 7), getRandomInt(7, 10)],\r\n    backgroundColor: [\r\n      '#FF6384',\r\n      '#36A2EB',\r\n      '#FFCE56',\r\n      '#25CE56'\r\n    ],\r\n    hoverBackgroundColor: [\r\n      '#FF6384',\r\n      '#36A2EB',\r\n      '#FFCE56',\r\n      '#25CE56'\r\n    ]\r\n  }]\r\n}\r\n\r\nconst DoughnutChart = () => (\r\n  <>\r\n    <div className='header'>\r\n      <h1 className='title'>2. {strings.esimerkki} {strings.kaavio}</h1>\r\n    </div>\r\n    <Doughnut data={data} />\r\n  </>\r\n)\r\n\r\nexport default DoughnutChart\r\n","import { React } from 'react'\r\nimport {\r\n    Card, CardContent, Container, Box, CssBaseline\r\n} from '@material-ui/core'\r\nimport HorizontalBarChart from './HorizontalBarChart'\r\nimport DoughnutChart from './DoughnutChart'\r\n\r\nfunction Stats() {\r\n\r\n    return (\r\n\r\n        <Box>\r\n            <CssBaseline />\r\n            <Container key=\"container1_user\" style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                component=\"main\">\r\n                <Card style={{ marginTop: \"10px\" }}>\r\n                    <CardContent style={{ width: \"100%\" }} className=\"HorizontalBarChart\">\r\n                        <HorizontalBarChart />\r\n                    </CardContent>\r\n                </Card>\r\n                <Card style={{ marginTop: \"10px\" }}>\r\n                    <CardContent style={{ width: \"100%\" }} className=\"DoughnutChart\">\r\n                        <DoughnutChart />\r\n                    </CardContent>\r\n                </Card>\r\n            </Container>\r\n        </Box>\r\n\r\n    )\r\n}\r\n\r\nexport default Stats","import React, { useCallback } from 'react'\r\n/* import { strings } from './Locale' */\r\nimport { useDropzone } from 'react-dropzone'\r\nimport request from 'superagent'\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nfunction Upload() {\r\n    const onDrop = useCallback(files => {\r\n\r\n        console.log(files);\r\n        const req = request.post(path+\"upload\");\r\n\r\n        files.forEach(file => {\r\n            req.attach('photos', file);\r\n            console.log(file);\r\n        });\r\n        req.end((err, res) => {\r\n            console.log(res)\r\n        });\r\n\r\n    }, []);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div name=\"photos\" key=\"photos\" style={{ paddingTop: \"60px\" }} {...getRootProps()}>\r\n            <input {...getInputProps()} />\r\n            {\r\n                isDragActive ?\r\n                    <p>Drop the files here ...</p> :\r\n                    <p>Drag 'n' drop some files here, or click to select files</p>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Upload","import React, { useState } from 'react'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport axios from 'axios'\r\nimport { strings } from './Locale'\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nconst Register = () => {\r\n\r\n    const [tempEtunimi, setTempEtunimi] = useState(\"\")\r\n    const [tempSukunimi, setTempSukunimi] = useState(\"\")\r\n    const [tempSahkoposti, setTempSahkoposti] = useState(\"\")\r\n    const [tempSalasana, setTempSalasana] = useState(\"\")\r\n    const [tempRooli, setTempRooli] = useState(\"user\")\r\n\r\n    const handleRadioButtons = (event) => {\r\n        setTempRooli(event.target.value)\r\n    }\r\n\r\n    const addUser = async () => {\r\n        try {\r\n            let result = await axios.post(path+\"lisaa_kayttaja\", {\r\n                etunimi: tempEtunimi,\r\n                sukunimi: tempSukunimi,\r\n                sahkoposti: tempSahkoposti,\r\n                salasana_hash: tempSalasana,\r\n                rooli: tempRooli\r\n            })\r\n            console.log(result)\r\n            alert(\"Käyttäjä lisätty onnistuneesti!\")\r\n        } catch (ex) {\r\n            console.log(ex.message)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Typography variant=\"h2\" component=\"h2\" style={{ paddingTop: \"60px\" }} className=\"h3 mb-3 font-weight-normal\">{strings.rekisteroidy}</Typography>\r\n            <Grid container spacing={1}>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"etunimi\"\r\n                        label={strings.etunimi}\r\n                        id=\"outlined-start-adornment1\"\r\n                        variant=\"outlined\"\r\n                        value={tempEtunimi}\r\n                        onChange={(event) => setTempEtunimi(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"sukunimi\"\r\n                        label={strings.sukunimi}\r\n                        id=\"outlined-start-adornment2\"\r\n                        variant=\"outlined\"\r\n                        value={tempSukunimi}\r\n                        onChange={(event) => setTempSukunimi(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"sahkoposti\"\r\n                        label={strings.sahkoposti}\r\n                        id=\"outlined-start-adornment3\"\r\n                        variant=\"outlined\"\r\n                        value={tempSahkoposti}\r\n                        onChange={(event) => setTempSahkoposti(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <FormControl variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"outlined-adornment-password\">{strings.salasana}</InputLabel>\r\n                        <OutlinedInput\r\n                            name=\"salasana\"\r\n                            id=\"outlined-adornment-password\"\r\n                            labelWidth={70}\r\n                            value={tempSalasana}\r\n                            onChange={(event) => setTempSalasana(event.target.value)}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">{strings.rooli}</FormLabel>\r\n                        <RadioGroup aria-label=\"rooli\" name=\"rooli1\" value={tempRooli} onChange={handleRadioButtons}>\r\n                            <FormControlLabel value=\"user\" control={<Radio />} label={strings.kayttaja} />\r\n                            <FormControlLabel value=\"admin\" control={<Radio />} label={strings.yllapitaja} />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <Button name=\"rekisteroidy_nappi\" onClick={addUser} type=\"submit\"\r\n                        className=\"btn btn-lg btn-primary btn-block\" variant=\"contained\" color=\"primary\">\r\n                        {strings.rekisteroidy}\r\n                    </Button>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Register","import React, { useState } from 'react'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { strings } from './Locale'\r\n\r\nconst Login = () => {\r\n    const [tempSahkoposti, setTempSahkoposti] = useState(\"\")\r\n    const [tempSalasana, setTempSalasana] = useState(\"\")\r\n    /* const [tempSalasanaUudestaan, setTempSalasanaUudestaan] = useState(\"\") */\r\n\r\n    const login = async () => {\r\n        console.log(\"login\")\r\n        /* let credentials =\r\n        {\r\n            sahkoposti: tempSahkoposti,\r\n            salasana_hash: tempSalasana,\r\n        }\r\n        try {\r\n            \r\n        } catch (ex) {\r\n            console.log(\"Kirjautuminen ei onnistunut...\",ex.message)\r\n        } */\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Typography variant=\"h2\" component=\"h2\" style={{ paddingTop: \"60px\" }} className=\"h3 mb-3 font-weight-normal\">{strings.kirjaudu}</Typography>\r\n            <Grid container spacing={1}>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"sahkoposti\"\r\n                        label={strings.sahkoposti}\r\n                        id=\"outlined-start-adornment3\"\r\n                        variant=\"outlined\"\r\n                        value={tempSahkoposti}\r\n                        onChange={(event) => setTempSahkoposti(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <FormControl variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"outlined-adornment-password\">{strings.salasana}</InputLabel>\r\n                        <OutlinedInput\r\n                            name=\"salasana_hash\"\r\n                            id=\"outlined-adornment-password\"\r\n                            labelWidth={70}\r\n                            value={tempSalasana}\r\n                            onChange={(event) => setTempSalasana(event.target.value)}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <Button onClick={login} type=\"submit\"\r\n                        className=\"btn btn-lg btn-primary btn-block\" variant=\"contained\" color=\"primary\">\r\n                        {strings.kirjaudu}\r\n                    </Button>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Login","import { AppBar, Toolbar, Typography } from '@material-ui/core'\r\nimport { useStyles, MenuButton } from './Style'\r\nimport { strings } from './Locale'\r\n\r\nexport function NavBar() {\r\n    const classes = useStyles()\r\n\r\n    strings.setLanguage(strings.getInterfaceLanguage())\r\n    console.log(\"Browser language in Settings: \" + strings.getInterfaceLanguage())\r\n    console.log(\"React App language: \" + strings.getLanguage())\r\n\r\n    return (\r\n        <>\r\n            <AppBar position=\"fixed\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        <MenuButton name=\"tentit\" href=\"/\">{strings.tentit}</MenuButton>\r\n                        <MenuButton name=\"tilastot\" href=\"/Stats\">{strings.tilastot}</MenuButton>{/* \r\n                        <MenuButton name=\"tiedostonlahetys\" href=\"/Upload\">{strings.tiedostonlahetys}</MenuButton> */}\r\n                        <MenuButton name=\"rekisteroidy\" href=\"/Register\">{strings.rekisteroidy}</MenuButton>\r\n                        <MenuButton name=\"kirjaudu\" href=\"/Login\">{strings.kirjaudu}</MenuButton>\r\n                        <MenuButton name=\"tietoa\" target=\"_blank\" href=\"https://www.youtube.com/watch?v=sAqnNWUD79Q\">\r\n                            {strings.tietoa}\r\n                        </MenuButton>\r\n                    </Typography>\r\n                    <MenuButton name=\"user\" href=\"/User\" style={{ backgroundColor: \"white\", color: \"blue\", marginRight: \"10px\" }}>{strings.kayttaja}</MenuButton>\r\n                    {/* <MenuButton name=\"admin\" href=\"/Admin\" style={{ backgroundColor: \"white\", color: \"red\" }}>{strings.yllapitaja}</MenuButton> */}\r\n                    {/* <MenuButton name=\"kieli\" onClick={() => vaihdetaanKieli()}>{strings.kieli + \"(\" + strings.getLanguage() + \")\"}</MenuButton> */}\r\n                    <MenuButton name=\"poistu\">{strings.poistu}</MenuButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n}","\r\nimport User from './User'\r\nimport Admin from './Admin'\r\nimport Stats from './Stats'\r\nimport Upload from './Upload'\r\nimport Register from './Register'\r\nimport Login from './Login'\r\nimport { NavBar } from './NavBar'\r\nimport { Route, Switch, Redirect } from 'react-router-dom'\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <div>\r\n            <NavBar />\r\n            <Switch>\r\n                <Route exact path=\"/User\" component={User} />\r\n                <Route exact path=\"/\">\r\n                    <Redirect to=\"/User\" />\r\n                </Route>\r\n                {/* <Route exact path=\"/Admin\" component={Admin} /> */}\r\n                <Route exact path=\"/Stats\" component={Stats} />\r\n                {/* <Route exact path=\"/Upload\" component={Upload} /> */}\r\n                {<Route exact path=\"/Register\" component={Register} />}\r\n                <Route exact path=\"/Login\" component={Login} />\r\n            </Switch>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Routes } from './components/Routes' // where we are going to specify our routes\r\nimport io from 'socket.io-client'\r\nimport Swal from 'sweetalert2'\r\n\r\n// null\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com'\r\n        break\r\n    case 'development':\r\n        // kuunnellaan serveriä portissa 4000\r\n        path = 'http://localhost:4000'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nconsole.log(\"WebSocket kuuntelee ilmoituksia\")\r\nlet socket = io(path)\r\nsocket.on('connected', function (data) {\r\n  socket.emit('ready for data', {})\r\n});\r\nsocket.on('update', function (data) {\r\n\r\n  const alert_data = JSON.parse(data.message.payload)\r\n  console.log(\"Trigger: \" + alert_data.trigger)\r\n  switch (alert_data.trigger) {\r\n    case 'insert_tentti':\r\n      console.log('Uusi tentti ' + alert_data.row.nimi + ' lisätty!')\r\n      Swal.fire({\r\n        title: '<strong>Uusi tentti <i>' + alert_data.row.nimi + '</i> lisätty!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>suoritettu:</b>\\t\\t' + alert_data.row.suoritettu + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '<b>minimipisteraja:</b>\\t' + alert_data.row.minimipisteraja +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'success',\r\n      })\r\n      break\r\n    case 'delete_tentti':\r\n      console.log('Tentti ' + alert_data.row.nimi + ' poistettu!')\r\n      Swal.fire({\r\n        title: '<strong>Tentti <i>' + alert_data.row.nimi + '</i> poistettu!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>suoritettu:</b>\\t\\t' + alert_data.row.suoritettu + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '<b>minimipisteraja:</b>\\t' + alert_data.row.minimipisteraja +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'warning',\r\n      })\r\n      break\r\n    case 'insert_kurssi':\r\n      console.log('Uusi kurssi ' + alert_data.row.nimi + ' lisätty!')\r\n      Swal.fire({\r\n        title: '<strong>Uusi kurssi <i>' + alert_data.row.nimi + '</i> lisätty!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'success',\r\n      })\r\n      break\r\n    case 'delete_kurssi':\r\n      console.log('Kurssi ' + alert_data.row.nimi + ' poistettu!')\r\n      Swal.fire({\r\n        title: '<strong>Kurssi <i>' + alert_data.row.nimi + '</i> poistettu!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'warning',\r\n      })\r\n      break\r\n    default:\r\n      console.log(\"Jotain meni pahasti pieleen...\")\r\n      break\r\n  }\r\n\r\n})\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <Routes />\r\n  </Router>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}