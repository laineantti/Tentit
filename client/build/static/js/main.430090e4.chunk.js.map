{"version":3,"sources":["components/Style.js","components/Locale.js","components/helpers.js","components/axiosreqs.js","components/CodeComponent.js","components/store.js","components/globalContext.js","components/User.js","components/DeleteExamDialog.js","components/DeleteCardDialog.js","components/ImageSelector.js","components/Admin.js","components/HorizontalBarChart.js","components/DoughnutChart.js","components/Stats.js","components/Upload.js","components/Register.js","components/Login.js","components/NavBar.js","components/NavBarLogin.js","components/Routes.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","fontSize","flexWrap","title","flexGrow","cover","width","padding","margin","spacing","withoutLabel","marginTop","textField","GreenCheckbox","withStyles","color","green","checked","props","Checkbox","MenuButton","styled","Button","ExamButton","strings","LocalizedStrings","fi","kieli","tentit","omatTentit","tilastot","rekisteroidy","kirjaudu","tietoa","kayttaja","yllapitaja","poistu","etunimi","sukunimi","sahkoposti","salasana","rooli","nayta","vastaukset","esimerkki","kaavio","tiedostonlahetys","pudotatiedostot","valitsetiedostot","en","tarkistaSahkoposti","email","undefined","Error","test","String","toLowerCase","tarkistaSalasana","str","autentikoitu","loggedUser","JSON","parse","stringify","window","localStorage","getItem","idToIndex","state","currentExamId","paluu","map","exam","index","id","console","log","path","fetchUser","setCurrentUser","setCurrentUserName","paluuarvo","a","headers","Authorization","axios","get","userData","data","userId","Number","user","fetchData","currentUser","dispatch","admin_sivulla","adminOikeus","method","url","response","tentit_string","tentit_data","length","i","kysymykset","kysymykset_taulu","kayttajan_vastaukset","j","vaihtoehdot","kuvat","vaihtoehdot_taulu","kysymyksen_kuvat_taulu","k","vastaus","vaihtoehdon_kuvat_taulu","l","vaihtoehto_id","type","fetchImage","maara","poikkeama","kysymysJaAihe","setKaikkiKysymykset","result","haeAiheet","setKaikkiAiheet","valintaMuuttui","kysymys_id","checkedValue","listItemIndex","exam_id","currentCourse","currentExamIndex","examIndex","cardIndex","lisaaKysymys","currentDatabaseExamIdChanged","lisaaKysymysTenttiin","item","lisaaVaihtoehto","oikeaValintaMuuttui","lisaaTentti","liitaKuvaKysymykseen","selectedImages","body","liitaKuvaVaihtoehtoon","poistaKuvanLiitos","sijainti","kuva_id","imageIndex","muutaTentti","tentti_id","value","newExam","muutaKysymys","lause","newCardLabel","muutaKysymyksenAihe","kaikkiAiheet","newCardAihe","aihe","aiheIndex","lisaaKysymykselleUusiAihe","uusiAihe","muutaVaihtoehto","newChoise","poistaKysymyksenLiitos","poistaVaihtoehdonLiitos","poistaTentti","voimalla","tiedot_poistettavasta_tentista","poistettu","poistaKysymys","tiedot_poistettavasta_kysymyksesta","CodeComponent","questionString","bs","background","vs","far","codePos","search","code","substring","question","slice","language","style","wrapLongLines","showLineNumbers","location","pathname","initialState","store","createContext","Provider","StateProvider","children","useReducer","action","tempCopy","push","oikea_vastaus","vaihtoehto","splice","aloitus","lopetus","minimipisteraja","nimi","suoritettu","cards","choises","correctAnswer","MainContext","MainProvider","useState","showAllCardImages","setShowAllCardImages","showAllChoiseImages","setShowAllChoiseImages","globalShowAllCardImages","globalShowAllChoiseImages","App","setCurrentExamId","setCurrentExamIndex","kaikkiKysymykset","setRows","rows","useContext","showCorrectAnswers","setShowCorrectAnswers","imageLoaded","setImageLoaded","classes","useEffect","Box","CssBaseline","Container","marginBottom","maxWidth","component","Object","values","card","Card","className","CardContent","content","List","whiteSpace","paddingTop","GridList","cellHeight","GridListTile","cols","height","ListSubheader","IconButton","float","aria-label","onClick","includes","filter","Badge","badgeContent","tile","tileIndex","maxHeight","href","tiedostonimi","target","rel","objectFit","src","alt","onLoad","onError","e","onerror","Skeleton","variant","uuid","listItem","ListItem","disabled","onChange","event","overflow","textOverflow","paddingLeft","gridList","cardChoisesArray","forEach","choise","CardMedia","marginRight","name","lista","kysymysIndex","listaItem","listaId","kysymysLista","DialogTitle","closeButton","position","right","top","palette","grey","onClose","other","disableTypography","Typography","DialogContent","MuiDialogContent","DialogActions","MuiDialogActions","DeleteExamDialog","examDeleteResult","setExamDeleteResult","deleting","setDeleting","force","setForce","_isMounted","useRef","open","setOpen","then","tiedot","current","kayttaja_string","kayttaja_id_luoja_string","kayttaja_id_tilaaja_string","kayttaja_id_vastaaja_string","liitos","liitokset","kayttaja_id_luoja","loppuosa","kayttaja_id_tilaaja","kayttaja_id_vastaaja","kurssi_id_string","kurssi_id","kysymys_id_string","poistoviesti","handleClose","label","Dialog","aria-labelledby","dividers","gutterBottom","autoFocus","tentinPoistoLogiikka","DeleteCardDialog","dataGridSelection","setDataGridSelection","cardDeleteResult","setCardDeleteResult","vaihtoehto_id_string","kuva_id_string","aihe_id_string","aihe_id","paivitaDataGrid","tentti_id_string","row","Grid","container","xs","selection","card_id","kysymyksenPoistoLogiikka","kysymys","justifyContent","backgroundColor","paper","icon","ImageSelector","setNewImageId","tileData","setTileData","setSelectedImages","limit","offset","setOffset","fullCount","setFullCount","unmounted","kuvatMuunnettu","full_count","kuva","img","author","getTileData","resetImageSelector","onkoKuvaValittu","valittu","dialogPaper","fullWidth","animation","GridListTileBar","subtitle","actionIcon","inputProps","filteredSelectedImages","kuvan_id","poistaValinta","Math","ceil","setCurrentDatabaseExamIdChanged","newExamId","setNewExamId","newCardId","setNewCardId","newChoiseId","setNewChoiseId","newImageId","lisaaAihe","setLisaaAihe","hakuId","examName","setExamName","textInput","TextField","onBlur","multiline","minWidth","defaultValue","addRow","inputRef","select","setTimeout","focus","InputProps","disableUnderline","option","MenuItem","Icon","textAlign","columns","field","headerName","flex","pageSize","checkboxSelection","onSelectionModelChange","newSelection","selectionModel","getRandomInt","min","max","floor","random","labels","datasets","borderColor","borderWidth","options","legend","scales","xAxes","ticks","yAxes","HorizontalBarChart","hoverBackgroundColor","DoughnutChart","Stats","Upload","onDrop","useCallback","files","req","request","post","file","attach","end","err","res","useDropzone","getRootProps","getInputProps","isDragActive","Register","tempEtunimi","setTempEtunimi","tempSukunimi","setTempSukunimi","tempSahkoposti","setTempSahkoposti","tempSalasana","setTempSalasana","tempRooli","setTempRooli","addUser","salasana_hash","alert","message","FormControl","InputLabel","htmlFor","OutlinedInput","labelWidth","FormLabel","RadioGroup","FormControlLabel","control","Radio","Login","kirjautunut","setKirjautunut","submitLogin","sah","sal","setItem","token","NavBar","currentUserName","examEdit","setExamEdit","anchorEl","setAnchorEl","isOpen","Boolean","AppBar","Toolbar","textDecoration","to","aria-controls","aria-haspopup","currentTarget","Menu","anchorOrigin","vertical","horizontal","transformOrigin","removeItem","logoutUser","NavBarLogin","setLanguage","getInterfaceLanguage","getLanguage","Routes","exact","User","Admin","socket","io","on","emit","alert_data","payload","trigger","Swal","fire","html","timer","timerProgressBar","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.430090e4.chunk.js","sourcesContent":["import { Button, styled, withStyles, makeStyles, Checkbox } from '@material-ui/core'\r\nimport { green } from '@material-ui/core/colors'\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: 'flex',\r\n      fontSize: '0.875rem',\r\n      flexWrap: 'wrap',\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    cover: {\r\n      width: 50,\r\n      padding: 10,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    withoutLabel: {\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    textField: {\r\n        width: '25ch',\r\n    },\r\n  }))\r\n\r\n  export const GreenCheckbox = withStyles({\r\n    root: {\r\n      color: green[400],\r\n      '&$checked': {\r\n        color: green[600],\r\n      },\r\n    },\r\n    checked: {},\r\n  })((props) => <Checkbox color=\"default\" {...props} />)\r\n  \r\n  export const MenuButton = styled(Button)({\r\n    color: '#fff',\r\n    padding: '6px 8px',\r\n    fontSize: '0.875rem',\r\n  })\r\n  \r\n  export const ExamButton = styled(Button)({\r\n    color: '#3f51b5',\r\n    padding: '6px 8px',\r\n  })","import LocalizedStrings from 'react-localization'\r\n\r\nexport let strings = new LocalizedStrings({\r\n    fi: {\r\n        kieli: \"kieli\",\r\n        tentit: \"tentit\",\r\n        omatTentit: \"omat tentit\",\r\n        tilastot: \"tilastot\",\r\n        rekisteroidy: \"rekisteröidy\",\r\n        kirjaudu: \"kirjaudu sisään\",\r\n        tietoa: \"tietoa\",\r\n        kayttaja: \"käyttäjä\",\r\n        yllapitaja: \"ylläpitäjä\",\r\n        poistu: \"kirjaudu ulos\",\r\n        etunimi: \"etunimi\",\r\n        sukunimi: \"sukunimi\",\r\n        sahkoposti: \"sähköposti\",\r\n        salasana: \"salasana\",\r\n        rooli: \"rooli\",\r\n        nayta: \"näytä\",\r\n        vastaukset: \"vastaukset\",\r\n        esimerkki: \"esimerkki\",\r\n        kaavio: \"kaavio\",\r\n        tiedostonlahetys: \"tiedoston lähetys\",\r\n        pudotatiedostot: \"Pudota tiedostot tähän\",\r\n        valitsetiedostot: \"tai klikkaa valitaksesi tiedostoja\"\r\n    },\r\n    en: {\r\n        kieli: \"language\",\r\n        tentit: \"exams\",\r\n        omatTentit: \"my exams\",\r\n        tilastot: \"statistics\",\r\n        rekisteroidy: \"sign in\",\r\n        kirjaudu: \"log in\",\r\n        tietoa: \"about\",\r\n        kayttaja: \"user\",\r\n        yllapitaja: \"admin\",\r\n        poistu: \"sign out\",\r\n        etunimi: \"first name\",\r\n        sukunimi: \"last name\",\r\n        sahkoposti: \"email\",\r\n        salasana: \"password\",\r\n        rooli: \"role\",\r\n        nayta: \"show\",\r\n        vastaukset: \"answers\",\r\n        esimerkki: \"example\",\r\n        kaavio: \"chart\",\r\n        tiedostonlahetys: \"upload file\",\r\n        pudotatiedostot: \"Drop the files here\",\r\n        valitsetiedostot: \"or click to select files\"\r\n    }\r\n})","\r\nconst tarkistaSahkoposti = (email) => {\r\n    if (email === undefined) {\r\n        throw new Error('Sähköpostia ei välitetty, tarkista lomake!');\r\n    }\r\n    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n  }\r\n\r\nconst tarkistaSalasana = (str) => {\r\n    // at least one number, one lowercase and one uppercase letter\r\n    // at least six characters\r\n    if (str === undefined) {\r\n        throw new Error('Salasanaa ei välitetty, tarkista lomake!');\r\n    }var res = /(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}/;\r\n    return res.test(str);\r\n  }\r\n\r\nconst autentikoitu = () => {\r\n\r\n  // palauttaa joko falsen tai tokenin\r\n\r\n  let loggedUser = JSON.parse(JSON.stringify(window.localStorage.getItem('jwtToken')));\r\n  if (!loggedUser) {\r\n    return false;\r\n  }\r\n  \r\n  return loggedUser;\r\n}\r\n\r\nconst hakuId = (state,currentExamId,currentExamIndex) => { \r\n  let paluu=idToIndex(state,currentExamId)\r\n  if (paluu === -1 || !state[currentExamIndex]){\r\n      return \"\"\r\n  } else {\r\n      return state[currentExamIndex].nimi\r\n  }      \r\n}\r\n\r\nconst idToIndex = (state,currentExamId) => {\r\n  let paluu = -1\r\n  if (currentExamId!==-1){\r\n      state.map((exam,index)=>{\r\n          if(exam.id===currentExamId){\r\n              paluu=index\r\n          }            \r\n      })\r\n  }\r\n  console.log(\"CurrentExamIndex \"+paluu)\r\n  return paluu\r\n}\r\n\r\n  export {\r\n      tarkistaSahkoposti, \r\n      tarkistaSalasana,\r\n      autentikoitu,\r\n      hakuId,\r\n      idToIndex,\r\n  }","import axios from 'axios'\r\nimport { autentikoitu } from './helpers'\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nconst fetchUser = async (setCurrentUser, setCurrentUserName, paluuarvo) => {\r\n    // let headers = { headers: { Authorization: `bearer ${autentikoitu()}` }, }\r\n    let headers = { headers: { Authorization: `bearer ${paluuarvo}` }, }\r\n    try {\r\n        let userData = await axios.get(path + \"kayttaja/\", headers)\r\n        if (userData.data.id) {\r\n            let userId = Number(userData.data.id)\r\n            let user = `${userData.data.etunimi} ${userData.data.sukunimi}`\r\n            setCurrentUser(userId)\r\n            setCurrentUserName(user)\r\n            console.log(userData.data.id, userData.data.etunimi, userData.data.sukunimi)\r\n        } else {\r\n            console.log(\"kirjautunut käyttäjä hukassa\")\r\n        }\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n}\r\n\r\nconst fetchData = async (currentUser, dispatch, admin_sivulla) => { // admin_sivulla? --> true/false\r\n    // ensin tarkistetaan admin-oikeus\r\n    let adminOikeus = false\r\n    try {\r\n        let response = await axios({\r\n            method: 'get',\r\n            url: `${path}kayttaja/`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        // asettaa admin tiedon (true/false)\r\n        if (response.data.rooli === \"admin\") {\r\n            adminOikeus = true\r\n        } else {\r\n            adminOikeus = false\r\n        }\r\n\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n\r\n    // haetaan data edeltävä sivu ja admin-oikeus huomioon ottaen\r\n    let headers = { headers: { Authorization: `bearer ${autentikoitu()}` }, }\r\n    try {\r\n        let tentit_string = \"\"\r\n        if (admin_sivulla) { // admin_sivulla? --> true/false\r\n            if (adminOikeus) {\r\n                tentit_string = path + \"tentti\"\r\n            } else {\r\n                tentit_string = path + \"oikeus_muokata_tenttia/\" + currentUser\r\n            }\r\n        } else {\r\n            tentit_string = path + \"kayttajan_tentit/\" + currentUser\r\n        }\r\n        let tentit_data = await axios.get(tentit_string, headers)\r\n        let tentit = tentit_data.data\r\n\r\n        if (tentit.length > 0) {\r\n            // käydään tentit läpi\r\n            for (var i = 0; i < tentit.length; i++) {\r\n                // haetaan tentin kysymykset\r\n                tentit[i].kysymykset = []\r\n                let kysymykset_taulu = await axios.get(path + \"tentin_kysymykset/\" + tentit[i].id, headers)\r\n                tentit[i].kysymykset = kysymykset_taulu.data\r\n                // haetaan kayttajan_vastaukset\r\n\r\n                if (tentit[i].kysymykset.length > 0) {\r\n                    let kayttajan_vastaukset =\r\n                        await axios.get(path + \"kayttajan_vastaukset/\" + currentUser + \"/\" + tentit[i].id, headers)\r\n                    // käydään tentin kysymykset läpi\r\n                    for (var j = 0; j < tentit[i].kysymykset.length; j++) {\r\n                        // haetaan kysymyksen vaihtoehdot\r\n                        tentit[i].kysymykset[j].vaihtoehdot = []\r\n                        tentit[i].kysymykset[j].kuvat = []\r\n                        let vaihtoehdot_taulu =\r\n                            await axios.get(path + \"kysymyksen_vaihtoehdot/\" + tentit[i].kysymykset[j].id, headers)\r\n                        let kysymyksen_kuvat_taulu =\r\n                            await axios.get(path + \"kysymyksen_kuvat/\" + tentit[i].kysymykset[j].id, headers)\r\n                        tentit[i].kysymykset[j].vaihtoehdot = vaihtoehdot_taulu.data\r\n                        tentit[i].kysymykset[j].kuvat = kysymyksen_kuvat_taulu.data\r\n                        // käydään kayttajan_vastaukset läpi\r\n                        for (var k = 0; k < tentit[i].kysymykset[j].vaihtoehdot.length; k++) {\r\n                            tentit[i].kysymykset[j].vaihtoehdot[k].vastaus = null\r\n                            let vaihtoehdon_kuvat_taulu =\r\n                                await axios.get(path + \"vaihtoehdon_kuvat/\" + tentit[i].kysymykset[j].vaihtoehdot[k].id, headers)\r\n                            tentit[i].kysymykset[j].vaihtoehdot[k].kuvat = vaihtoehdon_kuvat_taulu.data\r\n                            if (kayttajan_vastaukset.data.length > 0) {\r\n                                for (var l = 0; l < kayttajan_vastaukset.data.length; l++) {\r\n                                    if (tentit[i].kysymykset[j].vaihtoehdot[k].id === kayttajan_vastaukset.data[l].vaihtoehto_id) {\r\n                                        tentit[i].kysymykset[j].vaihtoehdot[k].vastaus = kayttajan_vastaukset.data[l].vastaus\r\n                                    }\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            dispatch({ type: \"INIT_DATA\", data: tentit })\r\n        } else {\r\n            throw console.log(\"Dataa ei saatu palvelimelta.\")\r\n        }\r\n    }\r\n    catch (exception) {\r\n        console.log(exception)\r\n    }\r\n}\r\n\r\nconst fetchImage = async (maara, poikkeama) => {\r\n    let headers = { headers: { Authorization: `bearer ${autentikoitu()}` }, }\r\n    try {\r\n        // taulukko näyttää tältä:\r\n        // [{ id: '1', tiedostonimi: 'abc123.jpg'}]\r\n        let response = await axios.get(path + \"kuva/\" + maara + \"/\" + poikkeama, headers)\r\n        if (response.data[0].id) {\r\n            return response.data\r\n        }\r\n    } catch (exception) {\r\n        console.log(exception)\r\n        return exception\r\n    }\r\n\r\n}\r\n\r\nconst logoutUser = (dispatch) => {\r\n    dispatch({\r\n        type: \"LOGOUT_USER\",\r\n        data: {}\r\n    })\r\n}\r\n\r\nconst kysymysJaAihe = async (setKaikkiKysymykset) => {\r\n    let headers = { headers: { Authorization: `bearer ${autentikoitu()}` }, }\r\n    try {\r\n        let result = await axios.get(path + \"kysymys_aihe\", headers)\r\n        setKaikkiKysymykset(result.data)\r\n    } catch (exception) {\r\n        console.log(\"Virhe tietokantahaussa!\")\r\n    }\r\n}\r\n\r\nconst haeAiheet = async (setKaikkiAiheet) => {\r\n    let headers = { headers: { Authorization: `bearer ${autentikoitu()}` }, }\r\n    try {\r\n        let result = await axios.get(path + \"aihe\", headers)\r\n        setKaikkiAiheet(result.data)\r\n    } catch (exception) {\r\n        console.log(\"Virhe tietokantahaussa!\")\r\n    }\r\n}\r\n\r\n\r\n// /paivita_valinta/:kayttaja_id/:vaihtoehto_id/:tentti_id/:kurssi_id/:vastaus\r\nconst valintaMuuttui = async (kysymys_id, checkedValue, vaihtoehto_id, listItemIndex, exam_id, currentUser, currentCourse, currentExamIndex, dispatch) => {\r\n    try {\r\n        await axios({\r\n            method: 'put',\r\n            url: `${path}paivita_valinta/${currentUser}/${vaihtoehto_id}/${exam_id}/${currentCourse}/${checkedValue}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        });\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n    dispatch({\r\n        type: \"checked_changed\",\r\n        data: {\r\n            examIndex: currentExamIndex,\r\n            cardIndex: kysymys_id,\r\n            listItemIndex: listItemIndex,\r\n            checkedValue: checkedValue\r\n        }\r\n    })\r\n}\r\n\r\nconst lisaaKysymys = async (currentDatabaseExamIdChanged, dispatch, currentExamIndex) => {\r\n    try {\r\n        console.log(path + \"lisaa_kysymys/\" + currentDatabaseExamIdChanged)\r\n        let response = await axios({\r\n            method: 'post',\r\n            url: `${path}lisaa_kysymys/${currentDatabaseExamIdChanged}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        // palauttaa uuden luodun kysymyksen id\r\n        return response.data\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n    dispatch({ type: \"add_card\", data: { examIndex: currentExamIndex } })\r\n}\r\n\r\nconst lisaaKysymysTenttiin = async (item, currentExamIndex) => {\r\n    try {\r\n        console.log(path + \"lisaa_kysymys_tenttiin/\" + item + \"/\" + currentExamIndex)\r\n        let response = await axios({\r\n            method: 'post',\r\n            url: `${path}lisaa_kysymys_tenttiin/${item}/${currentExamIndex}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        return response.data\r\n    } catch (exception) {\r\n        console.log(\"Kysymyksen liitos tenttiin epäonnistui!\")\r\n    }\r\n}\r\n\r\nconst lisaaVaihtoehto = async (dispatch, cardIndex, kysymys_id, currentExamIndex) => {\r\n    try {\r\n        console.log(path + \"lisaa_vaihtoehto/\" + kysymys_id)\r\n        let response = await axios({\r\n            method: 'post',\r\n            url: `${path}lisaa_vaihtoehto/${kysymys_id}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        // palauttaa uuden luodun kysymyksen id\r\n        return response.data\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n    dispatch({ type: \"add_choise\", data: { cardIndex: cardIndex, examIndex: currentExamIndex } })\r\n}\r\n\r\nconst oikeaValintaMuuttui = async (dispatch, currentExamIndex, kysymys_id, checkedValue, vaihtoehto_id, listItemIndex) => {\r\n    try {\r\n        await axios({\r\n            method: 'put',\r\n            url: `${path}paivita_oikea_valinta/${vaihtoehto_id}/${checkedValue}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n    dispatch({\r\n        type: \"correct_checked_changed\",\r\n        data: {\r\n            examIndex: currentExamIndex,\r\n            cardIndex: kysymys_id,\r\n            listItemIndex: listItemIndex,\r\n            checkedValue: checkedValue\r\n        }\r\n    })\r\n}\r\n\r\nconst lisaaTentti = async (dispatch, currentUser) => {\r\n    try {\r\n        let response = await axios({\r\n            method: 'post',\r\n            url: `${path}lisaa_tentti/${currentUser}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        dispatch({ type: \"add_exam\" })\r\n        // palauttaa uuden luodun tentin id\r\n        return response.data\r\n\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n}\r\n\r\nconst liitaKuvaKysymykseen = async (dispatch, examIndex, cardIndex, selectedImages, kysymys_id) => {\r\n    let body = {\r\n        kysymys_id: kysymys_id,\r\n        selectedImages: selectedImages\r\n    }\r\n    try {\r\n        let response = await axios({\r\n            method: 'post',\r\n            url: `${path}liita_kuva_kysymykseen/`,\r\n            data: body,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        // palauttaa uuden luodun kuvan id\r\n        return response.data\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n    console.log(examIndex)\r\n    dispatch({\r\n        type: \"add_image_card\",\r\n        data: {\r\n            examIndex: examIndex,\r\n            cardIndex: cardIndex,\r\n            kuvat: selectedImages\r\n        }\r\n    })\r\n}\r\n\r\nconst liitaKuvaVaihtoehtoon = async (dispatch, examIndex, cardIndex, selectedImages, kysymys_id, listItemIndex, vaihtoehto_id) => {\r\n    let body = {\r\n        kysymys_id: kysymys_id,\r\n        vaihtoehto_id: vaihtoehto_id,\r\n        selectedImages: selectedImages\r\n    }\r\n    try {\r\n        let response = await axios({\r\n            method: 'post',\r\n            url: `${path}liita_kuva_vaihtoehtoon/`,\r\n            data: body,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        // palauttaa uuden luodun kuvan id\r\n        return response.data\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n    dispatch({\r\n        type: \"add_image_choise\",\r\n        data: {\r\n            examIndex: examIndex,\r\n            cardIndex: cardIndex,\r\n            listItemIndex: listItemIndex,\r\n            kuvat: selectedImages\r\n        }\r\n    })\r\n}\r\n\r\nconst poistaKuvanLiitos = async (dispatch, currentExamIndex, cardIndex, sijainti, kuva_id, kysymys_id, imageIndex, vaihtoehto_id, listItemIndex) => {\r\n    let body = {\r\n        kysymys_id: kysymys_id,\r\n        vaihtoehto_id: vaihtoehto_id,\r\n        sijainti: sijainti,\r\n        kuva_id: kuva_id\r\n    }\r\n    try {\r\n        sijainti === \"kysymys\" ?\r\n            dispatch({\r\n                type: \"image_deleted_card\",\r\n                data: {\r\n                    examIndex: currentExamIndex,\r\n                    cardIndex: cardIndex,\r\n                    imageIndex: imageIndex\r\n                }\r\n            })\r\n            :\r\n            dispatch({\r\n                type: \"image_deleted_choise\",\r\n                data: {\r\n                    examIndex: currentExamIndex,\r\n                    cardIndex: cardIndex,\r\n                    listItemIndex: listItemIndex,\r\n                    imageIndex: imageIndex\r\n                }\r\n            })\r\n        await axios({\r\n            method: 'delete',\r\n            url: `${path}poista_kuvan_liitos/`,\r\n            data: body,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n}\r\n\r\nconst haeTentinLuojanId = async (tentti_id) => {\r\n    try {\r\n        let response = await axios({\r\n            method: 'get',\r\n            url: `${path}tentin_luoja/${tentti_id}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        // palauttaa tentin luojan id\r\n        return response.data\r\n\r\n    } catch (exception) {\r\n        console.log(\"Datan päivitäminen ei onnistunut.\")\r\n    }\r\n}\r\n\r\nconst muutaTentti = async (dispatch, currentExamIndex, tentti_id, value) => {\r\n    try {\r\n        await axios({\r\n            method: 'put',\r\n            url: `${path}paivita_tentti/${tentti_id}/${value}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n    dispatch({\r\n        type: \"exam_changed\",\r\n        data: { examIndex: currentExamIndex, newExam: value }\r\n    })\r\n}\r\n\r\nconst muutaKysymys = async (dispatch, currentExamIndex, value, id, cardIndex) => {\r\n    let body = {\r\n        lause: value,\r\n    }\r\n    try {\r\n        await axios({\r\n            method: 'put',\r\n            url: `${path}paivita_kysymys/${id}`,\r\n            data: body,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n    dispatch({\r\n        type: \"card_label_changed\",\r\n        data: { examIndex: currentExamIndex, cardIndex: cardIndex, newCardLabel: value }\r\n    })\r\n}\r\n\r\nconst muutaKysymyksenAihe = async (dispatch, currentExamIndex, value, id, cardIndex, kaikkiAiheet) => {\r\n    let newCardAihe = \"\";\r\n    kaikkiAiheet.map((aihe, aiheIndex) => {\r\n        if (aihe.id === value) {\r\n            newCardAihe = aihe.aihe\r\n        }\r\n    })\r\n    try {\r\n        await axios({\r\n            method: 'put',\r\n            url: `${path}paivita_kysymyksen_aihe/${id}/${value}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n    dispatch({\r\n        type: \"card_aihe_changed\",\r\n        data: { examIndex: currentExamIndex, cardIndex: cardIndex, newCardAihe: newCardAihe }\r\n    })\r\n}\r\n\r\nconst lisaaKysymykselleUusiAihe = async (dispatch, currentExamIndex, value, id, cardIndex, kaikkiAiheet, setKaikkiAiheet) => {\r\n    let body = {\r\n        aihe: value,\r\n    }\r\n    try {\r\n        let aihe = await axios({\r\n            method: 'post',\r\n            url: `${path}lisaa_aihe/${id}`,\r\n            data: body,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        let uusiAihe = {\r\n            id: aihe.data,\r\n            aihe: body.aihe\r\n        }\r\n        setKaikkiAiheet([...kaikkiAiheet, uusiAihe])\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n    dispatch({\r\n        type: \"card_aihe_changed\",\r\n        data: { examIndex: currentExamIndex, cardIndex: cardIndex, newCardAihe: body.aihe }\r\n    }) \r\n}\r\n\r\nconst muutaVaihtoehto = async (dispatch, currentExamIndex, value, vaihtoehto_id, cardIndex, listItemIndex) => {\r\n    try {\r\n        await axios({\r\n            method: 'put',\r\n            url: `${path}paivita_vaihtoehto/${vaihtoehto_id}/${value}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n    dispatch({\r\n        type: \"choise_changed\",\r\n        data: {\r\n            examIndex: currentExamIndex,\r\n            cardIndex: cardIndex,\r\n            listItemIndex: listItemIndex,\r\n            newChoise: value\r\n        }\r\n    })\r\n}\r\n\r\n// dispatch, currentExamIndex, card.id, cardIndex, state[currentExamIndex].id, autentikoitu()\r\nconst poistaKysymyksenLiitos = async (dispatch, currentExamIndex, kysymys_id, cardIndex, tentti_id) => {\r\n    console.log(\"Kysymys_id \" + kysymys_id + \", tentti_id \" + tentti_id + \", liitos poistettu!\")\r\n    try {\r\n        await axios({\r\n            method: 'delete',\r\n            url: `${path}poista_kysymyksen_liitos/${kysymys_id}/${tentti_id}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n    dispatch(\r\n        {\r\n            type: \"card_deleted\", data: {\r\n                examIndex: currentExamIndex,\r\n                cardIndex: cardIndex\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst poistaVaihtoehdonLiitos = async (dispatch, currentExamIndex, vaihtoehto_id, cardIndex, kysymys_id, listItemIndex) => {\r\n    console.log(\"Vaihtoehto_id \" + vaihtoehto_id + \", kysymys_id \" + kysymys_id + \", liitos poistettu!\")\r\n    try {\r\n        await axios({\r\n            method: 'delete',\r\n            url: `${path}poista_vaihtoehdon_liitos/${vaihtoehto_id}/${kysymys_id}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n    dispatch(\r\n        {\r\n            type: \"choise_deleted\", data: {\r\n                examIndex: currentExamIndex,\r\n                cardIndex: cardIndex,\r\n                listItemIndex: listItemIndex\r\n            }\r\n        }\r\n    )\r\n}\r\n\r\nconst poistaTentti = async (dispatch, currentExamIndex, tentti_id, voimalla) => {\r\n    let tiedot_poistettavasta_tentista = null\r\n    try {\r\n        let result = await axios({\r\n            method: 'delete',\r\n            url: `${path}poista_tentti/${tentti_id}/${voimalla}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        tiedot_poistettavasta_tentista = result.data\r\n        if (tiedot_poistettavasta_tentista.poistettu) {\r\n            console.log(\"Tentti_id \" + tentti_id + \", poistettu!\")\r\n            dispatch(\r\n                {\r\n                    type: \"exam_deleted\", data: {\r\n                        examIndex: currentExamIndex\r\n                    }\r\n                }\r\n            )\r\n        } else {\r\n            console.log(\"Tentti_id \" + tentti_id + \", poistaminen epäonnistui liitoksien takia!\")\r\n        }\r\n        return tiedot_poistettavasta_tentista\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n}\r\n\r\nconst poistaKysymys = async (dispatch, kysymys_id, cardIndex, examIndex, voimalla) => {\r\n    let tiedot_poistettavasta_kysymyksesta = null\r\n    try {\r\n        let result = await axios({\r\n            method: 'delete',\r\n            url: `${path}poista_kysymys/${kysymys_id}/${voimalla}`,\r\n            headers: { 'Authorization': `bearer ${autentikoitu()}` }\r\n        })\r\n        tiedot_poistettavasta_kysymyksesta = result.data\r\n        if (tiedot_poistettavasta_kysymyksesta.poistettu) {\r\n            console.log(\"Kysymys_id \" + kysymys_id + \", poistettu!\")\r\n            dispatch(\r\n                {\r\n                    type: \"card_deleted\", data: {\r\n                        cardIndex: cardIndex,\r\n                        examIndex: examIndex\r\n                    }\r\n                }\r\n            )\r\n        } else {\r\n            console.log(\"Kysymys_id \" + kysymys_id + \", poistaminen epäonnistui liitoksien takia!\")\r\n        }\r\n        return tiedot_poistettavasta_kysymyksesta\r\n    } catch (exception) {\r\n        console.log(exception)\r\n    }\r\n}\r\n\r\nexport {\r\n    fetchUser,\r\n    fetchData,\r\n    fetchImage,\r\n    logoutUser,\r\n    kysymysJaAihe,\r\n    haeAiheet,\r\n    valintaMuuttui,\r\n    lisaaKysymys,\r\n    lisaaKysymysTenttiin,\r\n    lisaaVaihtoehto,\r\n    oikeaValintaMuuttui,\r\n    lisaaTentti,\r\n    liitaKuvaKysymykseen,\r\n    liitaKuvaVaihtoehtoon,\r\n    poistaKuvanLiitos,\r\n    haeTentinLuojanId,\r\n    muutaTentti,\r\n    muutaKysymys,\r\n    muutaKysymyksenAihe,\r\n    lisaaKysymykselleUusiAihe,\r\n    muutaVaihtoehto,\r\n    poistaKysymyksenLiitos,\r\n    poistaVaihtoehdonLiitos,\r\n    poistaTentti,\r\n    poistaKysymys\r\n}","import SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { vs, far } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\n// merkkijonosta CODE sanan jälkeen tuleva osa tulkitaan koodiksi ja ennen CODE sanaa oleva osa kysymykseksi, jos CODE sanaa ei ole merkkijono tulostuu sellaisenaan\r\n\r\nconst CodeComponent = ({questionString, background}) => {\r\n\r\n    let bs = \"\"\r\n    switch (background) {\r\n        case 'light':\r\n            bs = vs\r\n            break\r\n        case 'darkBlue':\r\n            bs = far\r\n            break\r\n        case 'dark':\r\n            bs = far\r\n        default:\r\n            bs = vs\r\n    }\r\n    \r\n    \r\n    let codePos = questionString.search(\"CODE\")\r\n    if (codePos !== -1) {       // search palauttaa -1, jos etsittävää ei löydy\r\n        let code = questionString.substring(codePos+5)\r\n        let question = questionString.slice(0,codePos-1)\r\n        return (\r\n            <>\r\n                {question}\r\n                <SyntaxHighlighter language=\"javascript\" style={bs} wrapLongLines={true}\r\n                showLineNumbers={true}>\r\n                    {code}\r\n                </SyntaxHighlighter>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n            {window.location.pathname!==\"/admin\" ?\r\n                questionString \r\n            :\"\"}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CodeComponent","import React, { createContext, useReducer } from 'react'\r\n/* import uuid from 'react-uuid' */\r\n\r\n// alkuperäinen tapa luoda reducer\r\n// const [state, dispatch] = useReducer(reducer, [])\r\n\r\nconst initialState = []\r\nconst store = createContext(initialState)\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer((state, action) => {\r\n\r\n        let tempCopy = JSON.parse(JSON.stringify(state))\r\n\r\n        switch (action.type) {\r\n\r\n            case \"add_choise\":\r\n                let newChoise = {\r\n                    oikea_vastaus: false,\r\n                    vaihtoehto: \"Uusi vaihtoehto\",\r\n                    kuvat: []\r\n                }\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex].vaihtoehdot\r\n                    .push(newChoise)\r\n                return tempCopy\r\n\r\n            case \"add_card\":\r\n                let newCard = {\r\n                    lause: \"Uusi kysymys\",\r\n                    vaihtoehdot: [],\r\n                    kuvat: [],\r\n                    aihe: \"Muut\",\r\n                }\r\n                tempCopy[action.data.examIndex].kysymykset.push(newCard)\r\n                return tempCopy\r\n\r\n            case \"card_label_changed\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex].lause =\r\n                    action.data.newCardLabel\r\n                return tempCopy\r\n\r\n            case \"card_aihe_changed\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex].aihe =\r\n                    action.data.newCardAihe\r\n                return tempCopy                \r\n\r\n            case \"card_deleted\":\r\n                tempCopy[action.data.examIndex].kysymykset.splice(action.data.cardIndex, 1)\r\n                return tempCopy\r\n\r\n            case \"add_exam\":\r\n                let newExam = {\r\n                    aloitus: \"\",\r\n                    kysymykset: [],\r\n                    lopetus: \"\",\r\n                    minimipisteraja: \"\",\r\n                    nimi: \"Uusi tentti\",\r\n                    suoritettu: false,\r\n\r\n                }\r\n                tempCopy.push(newExam)\r\n                return tempCopy\r\n\r\n            case \"add_image_card\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                    .kuvat = action.data.kuvat\r\n                return tempCopy\r\n\r\n            case \"add_image_choise\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                    .vaihtoehdot[action.data.listItemIndex].kuvat = action.data.kuvat\r\n                return tempCopy\r\n\r\n            case \"image_deleted_card\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex].kuvat.splice(action.data.imageIndex, 1)\r\n                return tempCopy\r\n\r\n            case \"image_deleted_choise\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                    .vaihtoehdot[action.data.listItemIndex].kuvat.splice(action.data.imageIndex, 1)\r\n                return tempCopy\r\n\r\n            case \"exam_changed\":\r\n                tempCopy[action.data.examIndex].nimi = action.data.newExam\r\n                return tempCopy\r\n\r\n            case \"exam_deleted\":\r\n                tempCopy.splice(action.data.examIndex, 1)\r\n                return tempCopy\r\n\r\n            case \"correct_checked_changed\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                    .vaihtoehdot[action.data.listItemIndex].oikea_vastaus = action.data.checkedValue\r\n                return tempCopy\r\n\r\n            case \"checked_changed\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                    .vaihtoehdot[action.data.listItemIndex].vastaus = action.data.checkedValue\r\n                return tempCopy\r\n\r\n            case \"choise_changed\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                    .vaihtoehdot[action.data.listItemIndex].vaihtoehto = action.data.newChoise\r\n                return tempCopy\r\n\r\n            case \"choise_deleted\":\r\n                tempCopy[action.data.examIndex].kysymykset[action.data.cardIndex]\r\n                    .vaihtoehdot.splice(action.data.listItemIndex, 1)\r\n                return tempCopy\r\n\r\n            case \"answer_changed\":\r\n                tempCopy[action.data.examIndex].cards[action.data.cardIndex]\r\n                    .choises[action.data.listItemIndex].correctAnswer\r\n                    = action.data.checkedValue\r\n                return tempCopy\r\n\r\n            case \"LOGOUT_USER\":\r\n                state = initialState\r\n                return initialState\r\n\r\n            case \"INIT_DATA\":\r\n                return action.data\r\n\r\n            default:\r\n                throw new Error()\r\n\r\n        }\r\n    }, initialState)\r\n\r\n    return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n}\r\n\r\nexport { store, StateProvider }","import React, { createContext, useState } from 'react'\r\n\r\nconst MainContext = createContext()\r\n\r\nconst MainProvider = props => {\r\n    const [showAllCardImages, setShowAllCardImages] = useState([])\r\n    const [showAllChoiseImages, setShowAllChoiseImages] = useState([])\r\n\r\n    return (\r\n        <MainContext.Provider value={{\r\n            globalShowAllCardImages: [showAllCardImages, setShowAllCardImages],\r\n            globalShowAllChoiseImages: [showAllChoiseImages, setShowAllChoiseImages]\r\n        }}>\r\n            {props.children}\r\n        </MainContext.Provider>\r\n    )\r\n}\r\n\r\nexport { MainContext, MainProvider }","import { React, useState, useEffect, useContext, Fragment } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { useStyles, GreenCheckbox, ExamButton } from './Style'\r\nimport {\r\n    Card, CardContent, CardMedia, Container, Button, Badge,\r\n    List, ListItem, Box, Checkbox, CssBaseline, IconButton\r\n} from '@material-ui/core'\r\nimport GridList from '@material-ui/core/GridList'\r\nimport GridListTile from '@material-ui/core/GridListTile'\r\nimport ListSubheader from '@material-ui/core/ListSubheader'\r\n/* import GridListTileBar from '@material-ui/core/GridListTileBar' */\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport ImageIcon from '@material-ui/icons/Image'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { strings } from './Locale'\r\nimport { fetchData, valintaMuuttui } from './axiosreqs'\r\nimport CodeComponent from './CodeComponent'\r\nimport { store } from './store.js'\r\nimport { MainContext } from './globalContext.js'\r\nimport { idToIndex } from './helpers'\r\n\r\nfunction App({ currentUser, currentExamId, setCurrentExamId, currentExamIndex, setCurrentExamIndex, kaikkiKysymykset, rows, setRows }) {\r\n\r\n    const { globalShowAllCardImages, globalShowAllChoiseImages } = useContext(MainContext)\r\n    const [showAllCardImages, setShowAllCardImages] = globalShowAllCardImages\r\n    const [showAllChoiseImages, setShowAllChoiseImages] = globalShowAllChoiseImages\r\n\r\n    const { state, dispatch } = useContext(store)\r\n    const [showCorrectAnswers, setShowCorrectAnswers] = useState(false)\r\n    const [currentCourse, setCurrentCourse] = useState(1)\r\n    const [imageLoaded, setImageLoaded] = useState([])\r\n    const classes = useStyles()\r\n\r\n    const allCorrect = (cardChoisesArray) => {\r\n        cardChoisesArray.forEach((choise, i) => {\r\n            (choise.oikea_vastaus === null) && (cardChoisesArray[i].oikea_vastaus = false);\r\n            (choise.vastaus === null) && (cardChoisesArray[i].vastaus = false);\r\n        })\r\n        return (cardChoisesArray.filter(choise => choise.vastaus\r\n            === choise.oikea_vastaus).length === cardChoisesArray.length)\r\n    }\r\n\r\n\r\n    useEffect(() => {           // tekee tämän kun Useriin tullaan\r\n        fetchData(currentUser, dispatch, false) // admin_sivulla? --> true/false\r\n    }, [currentUser, dispatch])\r\n\r\n    const kysymysLista = (currentExamIndex) => {\r\n        let lista = kaikkiKysymykset\r\n        state[currentExamIndex].kysymykset.forEach((item, kysymysIndex) => {\r\n            lista.forEach((listaItem, listaId) => {\r\n                if (listaItem.id === item.id) {\r\n                    lista.splice(listaId, 1)\r\n                }\r\n            })\r\n        })\r\n        return (lista)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setCurrentExamIndex(idToIndex(state, currentExamId))\r\n    }, [state, currentExamId])\r\n\r\n\r\n    return (\r\n        currentExamIndex >= 0\r\n            && state\r\n            && state[currentExamIndex]\r\n            && state[currentExamIndex].id\r\n            && state[currentExamIndex].kysymykset\r\n            ?\r\n            <Box key={uuid()}>\r\n                <CssBaseline />\r\n                <Container key={uuid()} style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                    component=\"main\">\r\n                    <h2>{state[currentExamIndex].nimi}</h2>\r\n                    {Object.values(state[currentExamIndex].kysymykset)\r\n                        .map((card, cardIndex) =>\r\n                            <Card style={{ marginTop: \"10px\" }} key={uuid()} className={classes.root}>\r\n                                <CardContent style={{ width: \"100%\" }} className={classes.content}>\r\n                                    <List>\r\n                                        <p className=\"label\" style={{ whiteSpace: \"pre-wrap\" }}>\r\n                                            <CodeComponent questionString={card.lause} />\r\n                                        </p>\r\n                                        <div style={{ paddingTop: \"30px\" }} className={classes.root}>\r\n                                            <GridList cellHeight={150} style={{ width: \"100%\" }}>\r\n                                                <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n                                                    <ListSubheader component=\"div\" style={{ width: \"100%\" }}>\r\n                                                        {card.kuvat.length > 2 &&\r\n                                                            <IconButton style={{ float: \"right\" }} aria-label=\"expand\"\r\n                                                                onClick={() => {\r\n                                                                    showAllCardImages.includes(cardIndex) ?\r\n                                                                        setShowAllCardImages(showAllCardImages.filter(index => index !== cardIndex))\r\n                                                                        : setShowAllCardImages(showAllCardImages => [...showAllCardImages, cardIndex])\r\n                                                                }}>\r\n                                                                <Badge badgeContent={showAllCardImages.includes(cardIndex) ? 0 : card.kuvat.length - 2} color=\"primary\">\r\n                                                                    {showAllCardImages.includes(cardIndex) ?\r\n                                                                        <CloseIcon />\r\n                                                                        : <ImageIcon />\r\n                                                                    }\r\n                                                                </Badge>\r\n                                                            </IconButton>\r\n                                                        }\r\n                                                    </ListSubheader>\r\n                                                </GridListTile>\r\n                                                {card.kuvat.map((tile, tileIndex) => (\r\n                                                    (tileIndex < 2 || showAllCardImages.includes(cardIndex)) && <GridListTile key={uuid()} style={{ width: \"240px\", maxHeight: \"150\" }}>\r\n                                                        <a href={\"//localhost:4000/uploads/\" + tile.tiedostonimi} target=\"_blank\" rel=\"noreferrer\">\r\n                                                            <img\r\n                                                                style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\", display: imageLoaded.includes(tile.id) ? \"block\" : \"none\" }}\r\n                                                                src={\"//localhost:4000/uploads_thumbnails/thumbnail_\" + tile.tiedostonimi}\r\n                                                                alt={tile.tiedostonimi}\r\n                                                                /* loading=\"lazy\" */\r\n                                                                onLoad={() => {\r\n                                                                    !imageLoaded.includes(tile.id)\r\n                                                                        && setImageLoaded(imageLoaded => [...imageLoaded, tile.id])\r\n                                                                }}\r\n                                                                onError={(e) => { e.target.onerror = null; e.target.style.display = \"none\" }}\r\n                                                            />\r\n                                                        </a>\r\n                                                        {!imageLoaded.includes(tile.id) && <Skeleton variant=\"rect\" width={512} height={512} />}\r\n                                                    </GridListTile>\r\n                                                ))}\r\n                                            </GridList>\r\n                                        </div>\r\n                                        {Object.values(card.vaihtoehdot).map((listItem, listItemIndex) => (\r\n                                            <Fragment key={uuid()}>\r\n                                                <ListItem key={uuid()}>\r\n                                                    <Checkbox checked={listItem.vastaus} disabled={showCorrectAnswers}\r\n                                                        onChange={(event) => {\r\n                                                            valintaMuuttui(\r\n                                                                cardIndex, event.target.checked,\r\n                                                                listItem.id, listItemIndex,\r\n                                                                state[currentExamIndex].id,\r\n                                                                currentUser, currentCourse,\r\n                                                                currentExamIndex, dispatch)\r\n                                                        }}\r\n                                                    />\r\n                                                    {showCorrectAnswers && <GreenCheckbox disabled checked={listItem.oikea_vastaus} color=\"primary\" />}\r\n                                                    <p style={{ overflow: \"hidden\", textOverflow: \"ellipsis\" }}>\r\n                                                        {listItem.vaihtoehto}\r\n                                                    </p>\r\n                                                </ListItem>\r\n                                                <ListItem key={uuid()}>\r\n                                                    <div style={{ paddingLeft: \"45px\", width: \"100%\" }} className={classes.root}>\r\n                                                        <GridList cellHeight={150} style={{ width: \"100%\" }} className={classes.gridList}>\r\n                                                            <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n                                                                <ListSubheader component=\"div\" style={{ width: \"100%\" }}>\r\n                                                                    {listItem.kuvat.length > 2 &&\r\n                                                                        <IconButton style={{ float: \"right\" }} aria-label=\"expand\"\r\n                                                                            onClick={() => {\r\n                                                                                showAllChoiseImages.includes(listItemIndex) ?\r\n                                                                                    setShowAllChoiseImages(showAllChoiseImages.filter(index => index !== listItemIndex))\r\n                                                                                    : setShowAllChoiseImages(showAllChoiseImages => [...showAllChoiseImages, listItemIndex])\r\n                                                                            }}>\r\n                                                                            <Badge badgeContent={showAllChoiseImages.includes(listItemIndex) ? 0 : listItem.kuvat.length - 2} color=\"primary\">\r\n                                                                                {showAllChoiseImages.includes(listItemIndex) ?\r\n                                                                                    <CloseIcon />\r\n                                                                                    : <ImageIcon />\r\n                                                                                }\r\n                                                                            </Badge>\r\n                                                                        </IconButton>\r\n                                                                    }\r\n                                                                </ListSubheader>\r\n                                                            </GridListTile>\r\n                                                            {listItem.kuvat.map((tile, tileIndex) => (\r\n                                                                (tileIndex < 2 || showAllChoiseImages.includes(listItemIndex)) && <GridListTile key={uuid()} style={{ width: \"240px\", maxHeight: \"150\" }}>\r\n                                                                    <a href={\"//localhost:4000/uploads/\" + tile.tiedostonimi} target=\"_blank\" rel=\"noreferrer\">\r\n                                                                        <img\r\n                                                                            style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\", display: imageLoaded.includes(tile.id) ? \"block\" : \"none\" }}\r\n                                                                            src={\"//localhost:4000/uploads_thumbnails/thumbnail_\" + tile.tiedostonimi}\r\n                                                                            alt={tile.tiedostonimi}\r\n                                                                            /* loading=\"lazy\" */\r\n                                                                            onLoad={() => {\r\n                                                                                !imageLoaded.includes(tile.id)\r\n                                                                                    && setImageLoaded(imageLoaded => [...imageLoaded, tile.id])\r\n                                                                            }}\r\n                                                                            onError={(e) => { e.target.onerror = null; e.target.style.display = \"none\" }}\r\n                                                                        />\r\n                                                                    </a>\r\n                                                                    {!imageLoaded.includes(tile.id) && <Skeleton variant=\"rect\" width={512} height={512} />}\r\n                                                                </GridListTile>\r\n                                                            ))}\r\n                                                        </GridList>\r\n                                                    </div>\r\n                                                </ListItem>\r\n                                            </Fragment>\r\n                                        ))}\r\n                                    </List>\r\n                                </CardContent>\r\n                                {(showCorrectAnswers && (allCorrect(Object.values(card.vaihtoehdot))) ? (\r\n                                    <CardMedia className={classes.cover}>\r\n                                        <img className=\"image\" src=\"/images/selma.png\"\r\n                                            height=\"30px\" width=\"30px\" alt=\"Selma\" />\r\n                                    </CardMedia>\r\n                                ) : (null))}\r\n                            </Card>\r\n                        )\r\n                    }\r\n\r\n                    <Button style={{ marginTop: \"10px\", marginRight: \"10px\" }} name=\"vastaukset\" variant=\"contained\" color=\"primary\"\r\n                        onClick={() => (\r\n                            (showCorrectAnswers ? setShowCorrectAnswers(false) : setShowCorrectAnswers(true))\r\n                        )}>{strings.nayta} {strings.vastaukset}</Button>\r\n                </Container>\r\n            </Box>\r\n            :\r\n            <Box key={uuid()}>\r\n                <CssBaseline />\r\n                <Container key={uuid()} style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                    component=\"main\">\r\n\r\n                    {Object.values(state).map((exam, examIndex) =>\r\n                        <ExamButton style={{ marginTop: \"10px\" }} key={uuid()} name={exam.nimi} onClick={() => {\r\n                            setCurrentExamIndex(examIndex)\r\n                            setCurrentExamId(exam.id)\r\n                            setRows(kysymysLista(examIndex))\r\n                        }}>\r\n                            {exam.nimi}\r\n                        </ExamButton>\r\n                    )}\r\n                </Container>\r\n            </Box>\r\n\r\n    )\r\n}\r\n\r\nexport default App","import { React, useState, useEffect, useRef, useContext } from 'react'\r\nimport { poistaTentti } from './axiosreqs'\r\nimport { store } from './store.js'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\r\nimport MuiDialogContent from '@material-ui/core/DialogContent'\r\nimport MuiDialogActions from '@material-ui/core/DialogActions'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n})\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    )\r\n})\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent)\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions)\r\n\r\nexport default function DeleteExamDialog({ currentExamIndex, setCurrentExamIndex, currentDatabaseExamIdChanged }) {\r\n    const { state, dispatch } = useContext(store)\r\n    const [examDeleteResult, setExamDeleteResult] = useState(\"\")\r\n    const [deleting, setDeleting] = useState(true)\r\n    const [force, setForce] = useState(false)\r\n    const _isMounted = useRef(true)\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            _isMounted.current = false;\r\n        }\r\n    }, [])\r\n\r\n    async function tentinPoistoLogiikka(voimalla) {\r\n        try {\r\n            await poistaTentti(dispatch, currentExamIndex, currentDatabaseExamIdChanged, voimalla)\r\n                .then(tiedot => {\r\n                    if (_isMounted.current === true) {\r\n                        // Tieto kayttaja-liitoksista mihin tentti on liitettynä.\r\n                        let kayttaja_string = \"\"\r\n                        let kayttaja_id_luoja_string = \"\"\r\n                        let kayttaja_id_tilaaja_string = \"\"\r\n                        let kayttaja_id_vastaaja_string = \"\"\r\n                        let liitos = false\r\n\r\n                        // tentin luoja:\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kayttaja_id_luoja.length > 0) {\r\n                            liitos = true\r\n                            let loppuosa = \" luoma.\"\r\n                            if (tiedot.liitokset.kayttaja_id_luoja.length === 1) {\r\n                                kayttaja_id_luoja_string = \"Tämä tentti on käyttäjän \" +\r\n                                    tiedot.liitokset.kayttaja_id_luoja[0] + loppuosa\r\n                            } else {\r\n                                kayttaja_id_luoja_string = \"Tätä tenttiä on muokannut käyttäjät \"\r\n                                tiedot.liitokset.kayttaja_id_luoja.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kayttaja_id_luoja.length - 1) {\r\n                                        kayttaja_id_luoja_string += value + loppuosa\r\n                                    } else if (i === tiedot.liitokset.kayttaja_id_luoja.length - 2) {\r\n                                        kayttaja_id_luoja_string += value + \" ja \"\r\n                                    } else {\r\n                                        kayttaja_id_luoja_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                            kayttaja_string += kayttaja_id_luoja_string\r\n                        }\r\n                        // tentin tilaaja:\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kayttaja_id_tilaaja.length > 0) {\r\n                            liitos = true\r\n                            let loppuosa = \".\"\r\n                            if (tiedot.liitokset.kayttaja_id_tilaaja.length === 1) {\r\n                                kayttaja_id_tilaaja_string = \"Tentin on tilannut käyttäjä \" +\r\n                                    tiedot.liitokset.kayttaja_id_tilaaja[0] + loppuosa\r\n                            } else {\r\n                                kayttaja_id_tilaaja_string = \"Tentin on tilannut käyttäjät \"\r\n                                tiedot.liitokset.kayttaja_id_tilaaja.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kayttaja_id_tilaaja.length - 1) {\r\n                                        kayttaja_id_tilaaja_string += value + loppuosa\r\n                                    } else if (i === tiedot.liitokset.kayttaja_id_tilaaja.length - 2) {\r\n                                        kayttaja_id_tilaaja_string += value + \" ja \"\r\n                                    } else {\r\n                                        kayttaja_id_tilaaja_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                            kayttaja_string += \" \" + kayttaja_id_tilaaja_string\r\n                        }\r\n                        // tentin vastaaja:\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kayttaja_id_vastaaja.length > 0) {\r\n                            liitos = true\r\n                            let loppuosa = \".\"\r\n                            if (tiedot.liitokset.kayttaja_id_vastaaja.length === 1) {\r\n                                kayttaja_id_vastaaja_string = \"Tenttiin on vastannut käyttäjä \" +\r\n                                    tiedot.liitokset.kayttaja_id_vastaaja[0] + loppuosa\r\n                            } else {\r\n                                kayttaja_id_vastaaja_string = \"Tenttiin on vastannut käyttäjät \"\r\n                                tiedot.liitokset.kayttaja_id_vastaaja.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kayttaja_id_vastaaja.length - 1) {\r\n                                        kayttaja_id_vastaaja_string += value + loppuosa\r\n                                    } else if (i === tiedot.liitokset.kayttaja_id_vastaaja.length - 2) {\r\n                                        kayttaja_id_vastaaja_string += value + \" ja \"\r\n                                    } else {\r\n                                        kayttaja_id_vastaaja_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                            kayttaja_string += \" \" + kayttaja_id_vastaaja_string\r\n                        }\r\n\r\n                        // Tieto kursseista mihin tentti on liitettynä.\r\n                        let kurssi_id_string = \"\"\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kurssi_id.length > 0) {\r\n                            liitos = true\r\n                            if (tiedot.liitokset.kurssi_id.length === 1) {\r\n                                kurssi_id_string = \"Tentti on liitetty kurssiin \" +\r\n                                    tiedot.liitokset.kurssi_id[0] + \".\"\r\n                            } else {\r\n                                kurssi_id_string = \"Tentti on liitetty kursseihin \"\r\n                                tiedot.liitokset.kurssi_id.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kurssi_id.length - 1) {\r\n                                        kurssi_id_string += value + \".\"\r\n                                    } else if (i === tiedot.liitokset.kurssi_id.length - 2) {\r\n                                        kurssi_id_string += value + \" ja \"\r\n                                    } else {\r\n                                        kurssi_id_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                        } /* else {\r\n                        kurssi_id_string = \"Tentti ei ole millään kurssilla.\"\r\n                    } */\r\n                        // Tieto kysymyksistä mihin tentti on liitettynä.\r\n                        let kysymys_id_string = \"\"\r\n                        if (tiedot.liitokset.kysymys_id.length > 0) {\r\n                            liitos = true\r\n                            if (tiedot.liitokset.kysymys_id.length === 1) {\r\n                                kysymys_id_string = \"Se on liitetty kysymykseen \" +\r\n                                    tiedot.liitokset.kysymys_id[0] + \".\"\r\n                            } else {\r\n                                kysymys_id_string = \"Se on liitetty kysymyksiin \"\r\n                                tiedot.liitokset.kysymys_id.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kysymys_id.length - 1) {\r\n                                        kysymys_id_string += value + \".\"\r\n                                    } else if (i === tiedot.liitokset.kysymys_id.length - 2) {\r\n                                        kysymys_id_string += value + \" ja \"\r\n                                    } else {\r\n                                        kysymys_id_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                        } /* else {\r\n                        kysymys_id_string = \"Siihen ei ole liitetty yhtään kysymystä.\"\r\n                    } */\r\n                        // tarkistetaan onko oikeasti poistettu\r\n                        let poistoviesti = \"\"\r\n                        if (tiedot.poistettu) {\r\n                            poistoviesti = \"Tentti poistettiin onnistuneesti.\"\r\n                            // kun tentti on poistettu, asetetaan ja välitetään Admin-sivulla \r\n                            // valituksi tentiksi -1 (= tenttiä ei valittuna)\r\n                            setCurrentExamIndex(-1)\r\n                        } else {\r\n                            if (liitos) {\r\n                                poistoviesti = \"Tenttiä ei poistettu, koska muut käyttävät sitä. Voit siitä huolimatta halutessasi poistaa sen LOPULLISESTI.\"\r\n                            } else {\r\n                                poistoviesti = \"Tenttiä ei voitu juuri nyt poistaa. Yritä myöhemmin uudelleen.\"\r\n                            }\r\n                        }\r\n                        if (force === false) {\r\n                            setExamDeleteResult(kayttaja_string + \" \" + kurssi_id_string\r\n                                + \" \" + kysymys_id_string + \" \" + poistoviesti)\r\n                            setForce(true)\r\n                        } else {\r\n                            setExamDeleteResult(poistoviesti)\r\n                            setForce(false)\r\n                            setDeleting(false)\r\n                        }\r\n                    }\r\n                })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        setExamDeleteResult(\"\")\r\n        setDeleting(true)\r\n        setForce(false)\r\n        setOpen(true)\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        Open dialog\r\n      </Button> */}\r\n            <IconButton label=\"delete\" color=\"primary\"\r\n                onClick={handleClickOpen}>\r\n                <DeleteIcon />\r\n            </IconButton >\r\n            <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>Tentin poistaminen</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <Typography gutterBottom>{\r\n                        (examDeleteResult === \"\") ?\r\n                            `Haluatko varmasti poistaa tentin ${state[currentExamIndex].nimi}?` :\r\n                            examDeleteResult\r\n                    }</Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={() => {\r\n                        if (deleting) {\r\n                            tentinPoistoLogiikka(force)\r\n                        } else {\r\n                            handleClose()\r\n                        }\r\n                        // deleting ?\r\n                        //     tentinPoistoLogiikka(force)\r\n                        //     : handleClose()\r\n                    }\r\n                    } color={deleting ? \"secondary\" : \"default\"}>\r\n                        {\r\n                            deleting ?\r\n                                force ?\r\n                                    (\"POISTA LOPULLISESTI\") :\r\n                                    (\"Poista\")\r\n                                : (\"ok\")\r\n                        }\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => {\r\n                        handleClose()\r\n\r\n                    }} color=\"default\">\r\n                        {\r\n                            (\"Peruuta\")\r\n                        }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}\r\n","import { React, useState, useEffect, useRef, useContext } from 'react'\r\nimport MuiDialogContent from '@material-ui/core/DialogContent'\r\nimport MuiDialogActions from '@material-ui/core/DialogActions'\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport WarningIcon from '@material-ui/icons/Warning'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport Button from '@material-ui/core/Button'\r\nimport { poistaKysymys } from './axiosreqs'\r\nimport List from '@material-ui/core/List'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { store } from './store.js'\r\nimport uuid from 'react-uuid'\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n})\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    )\r\n})\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent)\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions)\r\n\r\nexport default function DeleteCardDialog({ currentExamIndex, dataGridSelection, setDataGridSelection, setRows, rows }) {\r\n    const { state, dispatch } = useContext(store)\r\n    const [cardDeleteResult, setCardDeleteResult] = useState([])\r\n    const [deleting, setDeleting] = useState(true)\r\n    const [force, setForce] = useState(false)\r\n    const _isMounted = useRef(true)\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            _isMounted.current = false;\r\n        }\r\n    }, [])\r\n\r\n    const getCardIndex = (card_id) => {\r\n        state[currentExamIndex].kysymykset.forEach((kysymys, i) => {\r\n            if (state[currentExamIndex].kysymykset[i].id === card_id)\r\n                return i\r\n        })\r\n    }\r\n\r\n    async function kysymyksenPoistoLogiikka(voimalla, kysymys_id, cardIndex, examIndex) {\r\n        try {\r\n            await poistaKysymys(dispatch, kysymys_id, cardIndex, examIndex, voimalla)\r\n                .then(tiedot => {\r\n                    if (_isMounted.current === true) {\r\n                        // Tieto kayttaja-liitoksista mihin tentti on liitettynä.\r\n                        let kayttaja_string = \"\"\r\n                        let kayttaja_id_luoja_string = \"\"\r\n                        let kayttaja_id_tilaaja_string = \"\"\r\n                        let kayttaja_id_vastaaja_string = \"\"\r\n                        let liitos = false\r\n\r\n                        console.log(tiedot)\r\n\r\n                        // tentin luoja:\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kayttaja_id_luoja.length > 0) {\r\n                            liitos = true\r\n                            let loppuosa = \" luomassa tentissä.\"\r\n                            if (tiedot.liitokset.kayttaja_id_luoja.length === 1) {\r\n                                kayttaja_id_luoja_string = \"Tämä kysymys on käyttäjän \" +\r\n                                    tiedot.liitokset.kayttaja_id_luoja[0] + loppuosa\r\n                            } else {\r\n                                kayttaja_id_luoja_string = \"Tätä kysymyksen sisältävää tenttiä on muokannut käyttäjät \"\r\n                                tiedot.liitokset.kayttaja_id_luoja.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kayttaja_id_luoja.length - 1) {\r\n                                        kayttaja_id_luoja_string += value + loppuosa\r\n                                    } else if (i === tiedot.liitokset.kayttaja_id_luoja.length - 2) {\r\n                                        kayttaja_id_luoja_string += value + \" ja \"\r\n                                    } else {\r\n                                        kayttaja_id_luoja_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                            kayttaja_string += kayttaja_id_luoja_string\r\n                        }\r\n                        // kysymyksen sisältävän tentin tilaaja:\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kayttaja_id_tilaaja.length > 0) {\r\n                            liitos = true\r\n                            let loppuosa = \".\"\r\n                            if (tiedot.liitokset.kayttaja_id_tilaaja.length === 1) {\r\n                                kayttaja_id_tilaaja_string = \"Kysymyksen sisältävän tentin on tilannut käyttäjä \" +\r\n                                    tiedot.liitokset.kayttaja_id_tilaaja[0] + loppuosa\r\n                            } else {\r\n                                kayttaja_id_tilaaja_string = \"Kysymyksen sisältävän tentin on tilannut käyttäjät \"\r\n                                tiedot.liitokset.kayttaja_id_tilaaja.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kayttaja_id_tilaaja.length - 1) {\r\n                                        kayttaja_id_tilaaja_string += value + loppuosa\r\n                                    } else if (i === tiedot.liitokset.kayttaja_id_tilaaja.length - 2) {\r\n                                        kayttaja_id_tilaaja_string += value + \" ja \"\r\n                                    } else {\r\n                                        kayttaja_id_tilaaja_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                            kayttaja_string += \" \" + kayttaja_id_tilaaja_string\r\n                        }\r\n                        // Kysymyksen sisältävän tentin vastaaja:\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kayttaja_id_vastaaja.length > 0) {\r\n                            liitos = true\r\n                            let loppuosa = \".\"\r\n                            if (tiedot.liitokset.kayttaja_id_vastaaja.length === 1) {\r\n                                kayttaja_id_vastaaja_string = \"Kysymyksen sisältävään tenttiin on vastannut käyttäjä \" +\r\n                                    tiedot.liitokset.kayttaja_id_vastaaja[0] + loppuosa\r\n                            } else {\r\n                                kayttaja_id_vastaaja_string = \"Kysymyksen sisältävään tenttiin on vastannut käyttäjät \"\r\n                                tiedot.liitokset.kayttaja_id_vastaaja.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kayttaja_id_vastaaja.length - 1) {\r\n                                        kayttaja_id_vastaaja_string += value + loppuosa\r\n                                    } else if (i === tiedot.liitokset.kayttaja_id_vastaaja.length - 2) {\r\n                                        kayttaja_id_vastaaja_string += value + \" ja \"\r\n                                    } else {\r\n                                        kayttaja_id_vastaaja_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                            kayttaja_string += \" \" + kayttaja_id_vastaaja_string\r\n                        }\r\n\r\n                        // Tieto kursseista mihin kysymyksen sisältävä tentti on liitettynä.\r\n                        let kurssi_id_string = \"\"\r\n                        if (!tiedot.poistettu && tiedot.liitokset.kurssi_id.length > 0) {\r\n                            liitos = true\r\n                            if (tiedot.liitokset.kurssi_id.length === 1) {\r\n                                kurssi_id_string = \"Kysymyksen sisältävän tentti on liitetty kurssiin \" +\r\n                                    tiedot.liitokset.kurssi_id[0] + \".\"\r\n                            } else {\r\n                                kurssi_id_string = \"Kysymyksen sisältävän tentti on liitetty kursseihin \"\r\n                                tiedot.liitokset.kurssi_id.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kurssi_id.length - 1) {\r\n                                        kurssi_id_string += value + \".\"\r\n                                    } else if (i === tiedot.liitokset.kurssi_id.length - 2) {\r\n                                        kurssi_id_string += value + \" ja \"\r\n                                    } else {\r\n                                        kurssi_id_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                        // Tieto vaihtoehdoista mihin kysymys on liitettynä.\r\n                        let vaihtoehto_id_string = \"\"\r\n                        if (tiedot.liitokset.vaihtoehto_id.length > 0) {\r\n                            liitos = true\r\n                            if (tiedot.liitokset.vaihtoehto_id.length === 1) {\r\n                                vaihtoehto_id_string = \"Se on liitetty vaihtoehtoon \" +\r\n                                    tiedot.liitokset.vaihtoehto_id[0] + \".\"\r\n                            } else {\r\n                                vaihtoehto_id_string = \"Se on liitetty vaihtoehtoihin \"\r\n                                tiedot.liitokset.vaihtoehto_id.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.vaihtoehto_id.length - 1) {\r\n                                        vaihtoehto_id_string += value + \".\"\r\n                                    } else if (i === tiedot.liitokset.vaihtoehto_id.length - 2) {\r\n                                        vaihtoehto_id_string += value + \" ja \"\r\n                                    } else {\r\n                                        vaihtoehto_id_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                        // Tieto kuvista mihin kysymys on liitettynä.\r\n                        let kuva_id_string = \"\"\r\n                        if (tiedot.liitokset.kuva_id.length > 0) {\r\n                            liitos = true\r\n                            if (tiedot.liitokset.kuva_id.length === 1) {\r\n                                kuva_id_string = \"Se on liitetty kuvaan \" +\r\n                                    tiedot.liitokset.kuva_id[0] + \".\"\r\n                            } else {\r\n                                kuva_id_string = \"Se on liitetty kuviin \"\r\n                                tiedot.liitokset.kuva_id.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.kuva_id.length - 1) {\r\n                                        kuva_id_string += value + \".\"\r\n                                    } else if (i === tiedot.liitokset.kuva_id.length - 2) {\r\n                                        kuva_id_string += value + \" ja \"\r\n                                    } else {\r\n                                        kuva_id_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                        // Tieto aiheista mihin kysymys on liitettynä.\r\n                        let aihe_id_string = \"\"\r\n                        if (tiedot.liitokset.aihe_id.length > 0) {\r\n                            liitos = true\r\n                            if (tiedot.liitokset.aihe_id.length === 1) {\r\n                                aihe_id_string = \"Se on liitetty aiheeseen \" +\r\n                                    tiedot.liitokset.aihe_id[0] + \".\"\r\n                            } else {\r\n                                aihe_id_string = \"Se on liitetty aiheisiin \"\r\n                                tiedot.liitokset.aihe_id.forEach((value, i) => {\r\n                                    if (i === tiedot.liitokset.aihe_id.length - 1) {\r\n                                        aihe_id_string += value + \".\"\r\n                                    } else if (i === tiedot.liitokset.aihe_id.length - 2) {\r\n                                        aihe_id_string += value + \" ja \"\r\n                                    } else {\r\n                                        aihe_id_string += value + \", \"\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                        // tarkistetaan onko oikeasti poistettu\r\n                        let poistoviesti = \"\"\r\n                        if (tiedot.poistettu) {\r\n                            poistoviesti = \"Kysymys poistettiin onnistuneesti.\"\r\n                            setDataGridSelection([])\r\n                            paivitaDataGrid()\r\n                        } else {\r\n                            if (liitos) {\r\n                                let tentti_id_string = \"\"\r\n                                if (tiedot.liitokset.tentti_id > 0) {\r\n                                    tiedot.liitokset.tentti_id.forEach((value, i) => {\r\n                                        tentti_id_string += value\r\n                                        if (i === tiedot.liitokset.tentti_id.length - 2) {\r\n                                            tentti_id_string += \" ja \"\r\n                                        } else if (i + 1 !== tiedot.liitokset.tentti_id.length) {\r\n                                            tentti_id_string += \", \"\r\n                                        }\r\n                                    })\r\n                                    poistoviesti = \"Kysymystä ei poistettu, koska muut käyttävät tenttejä (\" + tentti_id_string + \") joissa kysymys on osana.\"\r\n                                }\r\n                            } else {\r\n                                poistoviesti = \"Kysymystä ei voitu juuri nyt poistaa. Yritä myöhemmin uudelleen.\"\r\n                            }\r\n                        }\r\n                        if (force === false) {\r\n                            setCardDeleteResult(cardDeleteResult => [...cardDeleteResult, kayttaja_string + \" \" + kurssi_id_string\r\n                                + \" \" + vaihtoehto_id_string + \" \" + kuva_id_string + \" \" + aihe_id_string + \" \" + poistoviesti])\r\n                            setForce(true)\r\n                        } else {\r\n                            setCardDeleteResult(cardDeleteResult => [...cardDeleteResult, poistoviesti])\r\n                            setForce(false)\r\n                            setDeleting(false)\r\n                        }\r\n                    }\r\n                })\r\n        } catch (err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const handleClickOpen = () => {\r\n        setCardDeleteResult([])\r\n        setDeleting(true)\r\n        setForce(false)\r\n        setOpen(true)\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const paivitaDataGrid = () => {\r\n        setRows(rows.filter((row) => !dataGridSelection.includes(row.id)))\r\n        setDataGridSelection([])\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <IconButton style={{ float: \"right\" }} label=\"delete\" color=\"secondary\"\r\n                disabled={(dataGridSelection.length > 0) ? false : true}\r\n                onClick={handleClickOpen}>\r\n                <DeleteIcon />\r\n            </IconButton >\r\n            <Dialog onClose={handleClose} aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>Poista useita kysymyksiä</DialogTitle>\r\n                <DialogContent dividers>\r\n                    <Grid container spacing={1}>\r\n                        <Grid item xs={1}>\r\n                            <WarningIcon />\r\n                        </Grid>\r\n                        <Grid item xs={11}>\r\n                            <Typography component={'span'} gutterBottom>{\r\n                                (cardDeleteResult.length === 0) ?\r\n                                    `Oletko varma, että haluat poistaa pysyvästi nämä valitsemasi ${dataGridSelection.length} kysymystä? Niiden palauttaminen jälkikäteen ei ole mahdollista! Ota myös huomioon, että kysymykset poistuvat jokaisesta tentistä missä niitä tällä hetkellä käytetään!`\r\n                                    : <List>\r\n                                        {cardDeleteResult.map((result, i) =>\r\n                                            <ListItem key={uuid()}>Kysymys {dataGridSelection[i]} ({result})</ListItem>\r\n                                        )}\r\n                                    </List>\r\n                            }</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={() => {\r\n                        if (deleting) {\r\n                            dataGridSelection.forEach(selection => {\r\n                                kysymyksenPoistoLogiikka(force, selection, getCardIndex(selection), currentExamIndex)\r\n                            })\r\n                        } else {\r\n                            handleClose()\r\n                        }\r\n                    }\r\n                    } color={deleting ? \"secondary\" : \"default\"}>\r\n                        {\r\n                            deleting ?\r\n                                force ?\r\n                                    (\"Poista pysyvästi!\")\r\n                                    : (\"Kyllä\")\r\n                                : (\"Ok\")\r\n                        }\r\n                    </Button>\r\n                    {deleting &&\r\n                        <Button autoFocus onClick={() => {\r\n                            handleClose()\r\n\r\n                        }} color=\"default\">\r\n                            {\r\n                                (\"Ei\")\r\n                            }\r\n                        </Button>}\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    )\r\n}","import { React, useState, useContext, useEffect } from 'react'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\r\nimport MuiDialogContent from '@material-ui/core/DialogContent'\r\nimport MuiDialogActions from '@material-ui/core/DialogActions'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport ImageSearch from '@material-ui/icons/ImageSearch'\r\nimport GridList from '@material-ui/core/GridList'\r\nimport GridListTile from '@material-ui/core/GridListTile'\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport { fetchImage, liitaKuvaKysymykseen, liitaKuvaVaihtoehtoon, } from './axiosreqs'\r\nimport { store } from './store.js'\r\nimport uuid from 'react-uuid'\r\n\r\n// Dialog\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n})\r\n\r\n// GridTile\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        justifyContent: 'space-around',\r\n        overflow: 'hidden',\r\n        backgroundColor: theme.palette.background.paper,\r\n        width: \"490px\",\r\n    },\r\n    gridList: {\r\n        width: \"480px\",\r\n        height: \"470px\",\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n}))\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    )\r\n})\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent)\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n    },\r\n}))(MuiDialogActions)\r\n\r\nexport default function ImageSelector({ examIndex, cardIndex, listItemIndex, sijainti, setNewImageId }) {\r\n    const { state, dispatch } = useContext(store)\r\n    const [open, setOpen] = useState(false)\r\n    const [tileData, setTileData] = useState([])\r\n    const [imageLoaded, setImageLoaded] = useState([])\r\n    const [selectedImages, setSelectedImages] = useState([])\r\n    const [limit/* , setLimit */] = useState(6)\r\n    const [offset, setOffset] = useState(0)\r\n    const [fullCount, setFullCount] = useState(0)\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        let unmounted = false\r\n        const getTileData = async () => {\r\n            // hakee kuvat serveriltä ja muuntaa tietokannasta\r\n            // saadun taulun material-ui:n tileData-muotoon\r\n            let kuvat = []\r\n            let kuvatMuunnettu = []\r\n            kuvat = await fetchImage(limit, offset)\r\n            if (fullCount === 0) {\r\n                if (!unmounted) {\r\n                    setFullCount(kuvat[0].full_count)\r\n                }\r\n            }\r\n            if (kuvat.length > 0) {\r\n                for (const kuva of kuvat) {\r\n                    kuvatMuunnettu.push({\r\n                        id: kuva.id,\r\n                        img: kuva.tiedostonimi,\r\n                        title: kuva.tiedostonimi,\r\n                        author: 'tentit-app',\r\n                        cols: 2,\r\n                    })\r\n                }\r\n            }\r\n            if (!unmounted) {\r\n                setTileData(kuvatMuunnettu)\r\n                setImageLoaded([])\r\n            }\r\n        }\r\n        getTileData()\r\n        /* console.log(\"limit : \" + limit + \". offset: \" + offset + \". fullCount: \" + fullCount + \".\") */\r\n        return () => {\r\n            unmounted = true\r\n        }\r\n    }, [offset, limit, fullCount])\r\n\r\n    const handleClickOpen = () => {\r\n        resetImageSelector()\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const resetImageSelector = () => {\r\n        setSelectedImages([])\r\n        setOffset(0)\r\n    }\r\n\r\n    const onkoKuvaValittu = (id) => {\r\n        let valittu = false\r\n        if (selectedImages.length > 0) {\r\n            for (let i in selectedImages) {\r\n                if (selectedImages[i] === id) {\r\n                    valittu = true\r\n                }\r\n            }\r\n        }\r\n        return valittu\r\n    }\r\n\r\n    const asetaValinta = (id) => {\r\n        setSelectedImages(selectedImages => [...selectedImages, id])\r\n    }\r\n\r\n    const poistaValinta = (id) => {\r\n        if (selectedImages.length > 0) {\r\n            for (let i in selectedImages) {\r\n                if (selectedImages[i] === id) {\r\n                    const filteredSelectedImages = selectedImages.filter(kuvan_id => kuvan_id !== id)\r\n                    setSelectedImages(filteredSelectedImages)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <IconButton style={{ float: \"left\" }} label=\"delete\" color=\"primary\"\r\n                onClick={() => { handleClickOpen() }}>\r\n                <ImageSearch />\r\n            </IconButton >\r\n            <Dialog classes={{ paper: classes.dialogPaper }} fullWidth={true} maxWidth={'sm'} onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\" open={open}>\r\n                <DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Kuvan lisääminen {\r\n                        sijainti === \"kysymys\" ?\r\n                            \"kysymykseen\" :\r\n                            \"vaihtoehtoon\"\r\n                    }.\r\n\r\n                </DialogTitle>\r\n                <DialogContent dividers>\r\n                    <div className={classes.root}>\r\n                        <GridList cellHeight={150} className={classes.gridList} cols={4}>\r\n                            {tileData.map((tile) => (\r\n                                <GridListTile key={uuid()} style={{ width: \"240px\", maxHeight: \"150\" }} cols={tile.cols || 1}>\r\n                                    <a href={\"//localhost:4000/uploads/\" + tile.img} target=\"_blank\" rel=\"noreferrer\">\r\n                                        <img style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\", display: imageLoaded.includes(tile.id) ? \"block\" : \"none\" }}\r\n                                            src={\"//localhost:4000/uploads_thumbnails/thumbnail_\" + tile.img}\r\n                                            alt={tile.title}\r\n                                            /* loading=\"lazy\" */\r\n                                            onLoad={() => {\r\n                                                !imageLoaded.includes(tile.id)\r\n                                                    && setImageLoaded(imageLoaded => [...imageLoaded, tile.id])\r\n                                            }}\r\n                                        />\r\n                                        {!imageLoaded.includes(tile.id) && <Skeleton animation=\"wave\" variant=\"rect\" width={512} height={512} />}\r\n                                    </a>\r\n                                    <GridListTileBar\r\n                                        title={tile.title}\r\n                                        subtitle={<span>id: {tile.id}</span>}\r\n                                        actionIcon={\r\n                                            <Checkbox\r\n                                                style={{ color: \"white\" }}\r\n                                                color=\"primary\"\r\n                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n                                                checked={onkoKuvaValittu(tile.id)}\r\n                                                onClick={() => {\r\n                                                    onkoKuvaValittu(tile.id) ? poistaValinta(tile.id) : asetaValinta(tile.id);\r\n                                                }}\r\n                                            />\r\n                                        }\r\n                                    />\r\n                                </GridListTile>\r\n                            ))}\r\n                        </GridList>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Typography>Sivu {(offset / limit) + 1}/{Math.ceil(fullCount / limit)}</Typography>\r\n                    <Button disabled={offset > 0 ? false : true} autoFocus onClick={() => {\r\n                        let tempOffset = (offset - limit)\r\n                        setOffset(tempOffset)\r\n                    }} color=\"default\">\r\n                        {\r\n                            (\"Edellinen\")\r\n                        }\r\n                    </Button>\r\n                    <Button disabled={offset < (fullCount - limit) ? false : true} autoFocus onClick={() => {\r\n                        let tempOffset = (offset + limit)\r\n                        setOffset(tempOffset)\r\n\r\n                    }} color=\"default\">\r\n                        {\r\n                            (\"Seuraava\")\r\n                        }\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => {\r\n                        let kysymys_id = state[examIndex].kysymykset[cardIndex].id\r\n                        if (sijainti === \"kysymys\") {\r\n                            setNewImageId(liitaKuvaKysymykseen(dispatch, examIndex, cardIndex, selectedImages, kysymys_id))\r\n                        } else {\r\n                            let vaihtoehto_id = state[examIndex].kysymykset[cardIndex].vaihtoehdot[listItemIndex].id\r\n                            setNewImageId(liitaKuvaVaihtoehtoon(dispatch, examIndex, cardIndex, selectedImages, kysymys_id, listItemIndex, vaihtoehto_id))\r\n                        }\r\n                        handleClose()\r\n                    }} color={\"secondary\"}>\r\n                        {\r\n                            selectedImages.length <= 1 ?\r\n                                \"Lisää kuva\"\r\n                                : \"Lisää kuvat (\" + selectedImages.length + \")\"\r\n                        }\r\n                    </Button>\r\n                    <Button autoFocus onClick={() => {\r\n                        handleClose()\r\n\r\n                    }} color=\"default\">\r\n                        {\r\n                            (\"Peruuta\")\r\n                        }\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog >\r\n        </div >\r\n    )\r\n}\r\n","import { React, useState, useEffect, useContext, useRef, Fragment } from 'react'\r\nimport uuid from 'react-uuid'\r\nimport { useStyles, GreenCheckbox, ExamButton } from './Style'\r\n/* import axios from 'axios' */\r\nimport {\r\n    Card, CardContent, TextField, Container, Badge,\r\n    List, ListItem, Box, Icon, CssBaseline, IconButton, MenuItem\r\n} from '@material-ui/core'\r\nimport GridList from '@material-ui/core/GridList'\r\nimport GridListTile from '@material-ui/core/GridListTile'\r\nimport ListSubheader from '@material-ui/core/ListSubheader'\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar'\r\nimport Skeleton from '@material-ui/lab/Skeleton'\r\nimport ImageIcon from '@material-ui/icons/Image'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport DeleteExamDialog from './DeleteExamDialog'\r\nimport DeleteCardDialog from './DeleteCardDialog'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport { store } from './store.js'\r\nimport { MainContext } from './globalContext.js'\r\nimport {\r\n    fetchData,\r\n    kysymysJaAihe,\r\n    /* valintaMuuttui, */\r\n    haeAiheet,\r\n    lisaaKysymys,\r\n    lisaaKysymysTenttiin,\r\n    lisaaVaihtoehto,\r\n    oikeaValintaMuuttui,\r\n    lisaaTentti,\r\n    poistaKuvanLiitos,\r\n    muutaTentti,\r\n    muutaKysymys,\r\n    muutaKysymyksenAihe,\r\n    lisaaKysymykselleUusiAihe,\r\n    muutaVaihtoehto,\r\n    poistaKysymyksenLiitos,\r\n    poistaVaihtoehdonLiitos\r\n} from './axiosreqs'\r\nimport CodeComponent from './CodeComponent'\r\nimport ImageSelector from './ImageSelector'\r\nimport { hakuId, idToIndex } from './helpers'\r\n\r\n\r\nfunction App({ currentUser, currentExamId, setCurrentExamId, currentExamIndex, setCurrentExamIndex, kaikkiKysymykset, setKaikkiKysymykset, rows, setRows }) {\r\n\r\n    const { globalShowAllCardImages, globalShowAllChoiseImages } = useContext(MainContext)\r\n    const [showAllCardImages, setShowAllCardImages] = globalShowAllCardImages\r\n    const [showAllChoiseImages, setShowAllChoiseImages] = globalShowAllChoiseImages\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', type: 'number', flex: 0.25 },\r\n        { field: 'lause', headerName: 'Kysymys', flex: 1.5 },\r\n        { field: 'aihe', headerName: 'Aihealue', flex: 0.75 },\r\n    ];\r\n\r\n\r\n    const { state, dispatch } = useContext(store)\r\n    // const storeContext = useContext(store)\r\n    // const { state } = storeContext\r\n    // const { dispatch } = storeContext\r\n\r\n    const [currentDatabaseExamIdChanged, setCurrentDatabaseExamIdChanged] = useState(-1)\r\n    const [newExamId, setNewExamId] = useState(-1)\r\n    const [newCardId, setNewCardId] = useState(-1)\r\n    const [newChoiseId, setNewChoiseId] = useState(-1)\r\n    const [newImageId, setNewImageId] = useState(-1)\r\n    const [imageLoaded, setImageLoaded] = useState([])\r\n    // const [kaikkiKysymykset, setKaikkiKysymykset] = useState([])\r\n    const [kaikkiAiheet, setKaikkiAiheet] = useState([])\r\n    const [dataGridSelection, setDataGridSelection] = useState([])\r\n    const [lisaaAihe, setLisaaAihe] = useState([])\r\n    // const [rows, setRows] = useState([])\r\n    const classes = useStyles()\r\n\r\n\r\n    useEffect(() => {\r\n        fetchData(currentUser, dispatch, true) // admin_sivulla? --> true/false\r\n        kysymysJaAihe(setKaikkiKysymykset)\r\n        haeAiheet(setKaikkiAiheet)\r\n    }, [currentUser, setKaikkiKysymykset, dispatch, newExamId, newCardId, newChoiseId, currentExamIndex, rows, newImageId])\r\n\r\n    const [examName, setExamName] = useState(hakuId(state, currentExamId, currentExamIndex))\r\n\r\n    const kysymysLista = (currentExamIndex) => {\r\n        let lista = kaikkiKysymykset\r\n        state[currentExamIndex].kysymykset.forEach((item, kysymysIndex) => {\r\n            lista.forEach((listaItem, listaId) => {\r\n                if (listaItem.id === item.id) {\r\n                    lista.splice(listaId, 1)\r\n                }\r\n            })\r\n        })\r\n        return (lista)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLisaaAihe([])\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setCurrentExamIndex(idToIndex(state, currentExamId))\r\n    }, [state, currentExamId])\r\n\r\n    let textInput = useRef(null)\r\n\r\n    return (\r\n        currentExamIndex >= 0\r\n            && state\r\n            && state[currentExamIndex]\r\n            && state[currentExamIndex].id\r\n            && state[currentExamIndex].kysymykset\r\n            && examName\r\n            ?\r\n            <Box key={uuid()}>\r\n                <CssBaseline />\r\n                <Container key={uuid()} style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                    component=\"main\">\r\n\r\n                    <h2 key={uuid()}>\r\n                        <TextField key={uuid()} type=\"text\" style={{ width: \"85%\" }} value={examName} id={state[currentExamIndex].id}\r\n                            onChange={(event) => {\r\n                                setExamName(event.target.value)\r\n                            }}\r\n                            onBlur={() => {\r\n                                if (examName === \"\") {\r\n                                    setExamName(\"Nimetön\")\r\n                                    muutaTentti(dispatch, currentExamIndex, state[currentExamIndex].id, \"Nimetön\")\r\n                                }\r\n                                muutaTentti(dispatch, currentExamIndex, state[currentExamIndex].id, examName)\r\n                            }}> {/* Logiikka tehty, mutta heittää [object Promise] */}\r\n                        </TextField> {/* {\"(luoja_id: \" + haeTentinLuojanId(state[currentExamIndex].id) + \")\"} */}\r\n                        <DeleteExamDialog key={uuid()}\r\n                            /* tentin poistonappi */\r\n                            currentExamIndex={currentExamIndex}\r\n                            setCurrentExamIndex={setCurrentExamIndex}\r\n                            currentDatabaseExamIdChanged={currentDatabaseExamIdChanged}\r\n                        />\r\n\r\n                    </h2>\r\n\r\n                    {/* {console.log(\"state[currentExamIndex].id (tietokannan tentin id): \", state[currentExamIndex].id)}\r\n                                {console.log(\"currentExamIndex (taulukon index): \", currentExamIndex)} */}\r\n                    {state[currentExamIndex].kysymykset\r\n                        .map((card, cardIndex) =>\r\n                            <Card style={{ marginTop: \"10px\" }} key={uuid()} className={classes.root}>\r\n                                <CardContent key={uuid()} style={{ width: \"100%\" }} className={classes.content}>\r\n                                    <List key={uuid()}>\r\n                                        <CodeComponent key={uuid()} style={{ width: \"100%\" }} questionString={card.lause} background=\"darkBlue\" />\r\n                                        <ImageSelector key={uuid()}\r\n                                            examIndex={currentExamIndex}\r\n                                            cardIndex={cardIndex}\r\n                                            sijainti=\"kysymys\"\r\n                                            setNewImageId={setNewImageId}\r\n                                        />\r\n                                        <TextField key={uuid()} multiline type=\"text\" style={{ minWidth: \"93%\" }} defaultValue={card.lause} id={card.id} onBlur={(event) => {\r\n                                            muutaKysymys(dispatch, currentExamIndex, event.target.value, card.id, cardIndex)\r\n                                        }}>\r\n                                        </TextField>\r\n                                        <IconButton key={uuid()} style={{ float: \"right\" }} label=\"delete\"\r\n                                            color=\"primary\" onClick={() => {\r\n                                                poistaKysymyksenLiitos(dispatch, currentExamIndex, card.id, cardIndex, state[currentExamIndex].id)\r\n                                                let addRow = [{\r\n                                                    id: card.id,\r\n                                                    lause: card.lause,\r\n                                                    aihe: card.aihe\r\n                                                }]\r\n                                                setRows([...rows, ...addRow])\r\n                                            }}>\r\n                                            <DeleteIcon />\r\n                                        </IconButton >\r\n                                        {lisaaAihe.includes(card.id) ?\r\n                                            <TextField key={uuid()}\r\n                                                type=\"text\"\r\n                                                defaultValue={\"\"}\r\n                                                inputRef={textInput}\r\n                                                onBlur={(event) => {\r\n                                                    if (event.target.value) {\r\n                                                        lisaaKysymykselleUusiAihe(dispatch, currentExamIndex, event.target.value, card.id, cardIndex, kaikkiAiheet, setKaikkiAiheet)\r\n                                                        console.log(\"Ja eikun uusi aihe \" + event.target.value + \" talteen!\")\r\n                                                        setLisaaAihe([])\r\n                                                    } else {\r\n                                                        setLisaaAihe([])\r\n                                                    }\r\n                                                }}>\r\n\r\n                                            </TextField>\r\n                                            :\r\n                                            <span key={uuid()}>{card.aihe}</span>\r\n                                        }\r\n                                        <TextField key={uuid()} style={{ minWidth: \"2%\" }}\r\n                                            value={''}\r\n                                            select\r\n                                            onChange={(event) => {\r\n                                                if (event.target.value) {\r\n                                                    muutaKysymyksenAihe(dispatch, currentExamIndex, event.target.value, card.id, cardIndex, kaikkiAiheet)\r\n                                                } else {\r\n                                                    setLisaaAihe(lisaaAihe => [...lisaaAihe, card.id])\r\n                                                    setTimeout(() => { textInput.current.focus() }, 100)\r\n                                                }\r\n                                            }}\r\n                                            InputProps={{ disableUnderline: true }}>\r\n                                            {kaikkiAiheet.map((option) => (\r\n                                                <MenuItem key={option.id} value={option.id}>\r\n                                                    {option.aihe}\r\n                                                </MenuItem>\r\n                                            ))}\r\n                                            <MenuItem key={uuid()}>\r\n                                                ...lisää aihe\r\n                                            </MenuItem>\r\n                                            Focus TextField\r\n                                        </TextField><br />\r\n                                        <div style={{ paddingTop: \"30px\" }} className={classes.root}>\r\n                                            <GridList cellHeight={150} style={{ width: \"100%\" }}>\r\n                                                <GridListTile key={uuid()} cols={2} style={{ height: 'auto' }}>\r\n                                                    <ListSubheader component=\"div\" style={{ width: \"100%\" }}>\r\n                                                        {card.kuvat.length > 2 &&\r\n                                                            <IconButton style={{ float: \"right\" }} aria-label=\"expand\"\r\n                                                                onClick={() => {\r\n                                                                    showAllCardImages.includes(cardIndex) ?\r\n                                                                        setShowAllCardImages(showAllCardImages.filter(index => index !== cardIndex))\r\n                                                                        : setShowAllCardImages(showAllCardImages => [...showAllCardImages, cardIndex])\r\n                                                                }}>\r\n                                                                <Badge badgeContent={showAllCardImages.includes(cardIndex) ? 0 : card.kuvat.length - 2} color=\"primary\">\r\n                                                                    {showAllCardImages.includes(cardIndex) ?\r\n                                                                        <CloseIcon />\r\n                                                                        : <ImageIcon />\r\n                                                                    }\r\n                                                                </Badge>\r\n                                                            </IconButton>\r\n                                                        }\r\n                                                    </ListSubheader>\r\n                                                </GridListTile>\r\n                                                {card.kuvat.map((tile, tileIndex) => (\r\n                                                    (tileIndex < 2 || showAllCardImages.includes(cardIndex)) && <GridListTile key={uuid()} style={{ width: \"240px\", maxHeight: \"150\" }}>\r\n                                                        <a href={\"//localhost:4000/uploads/\" + tile.tiedostonimi} target=\"_blank\" rel=\"noreferrer\">\r\n                                                            <img\r\n                                                                style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\", display: imageLoaded.includes(tile.id) ? \"block\" : \"none\" }}\r\n                                                                src={\"//localhost:4000/uploads_thumbnails/thumbnail_\" + tile.tiedostonimi}\r\n                                                                alt={tile.tiedostonimi}\r\n                                                                /* loading=\"lazy\" */\r\n                                                                onLoad={() => {\r\n                                                                    !imageLoaded.includes(tile.id)\r\n                                                                        && setImageLoaded(imageLoaded => [...imageLoaded, tile.id])\r\n                                                                }}\r\n                                                                onError={(e) => { e.target.onerror = null; e.target.style.display = \"none\" }}\r\n                                                            />\r\n                                                        </a>\r\n                                                        {!imageLoaded.includes(tile.id) ?\r\n                                                            <Skeleton variant=\"rect\" width={512} height={512} />\r\n                                                            : <GridListTileBar\r\n                                                                title={<>\r\n                                                                    {<span>id: {tile.id}</span>}\r\n                                                                </>}\r\n                                                                subtitle={tile.tiedostonimi}\r\n                                                                actionIcon={\r\n                                                                    <IconButton key={uuid()} style={{ color: \"white\", float: \"right\" }} label=\"delete\"\r\n                                                                        color=\"primary\" onClick={() =>\r\n                                                                            setNewImageId(poistaKuvanLiitos(dispatch, currentExamIndex, cardIndex, \"kysymys\", tile.id, card.id, tileIndex))\r\n                                                                        }>\r\n                                                                        <DeleteIcon />\r\n                                                                    </IconButton >\r\n                                                                }\r\n                                                            />}\r\n                                                    </GridListTile>\r\n                                                ))}\r\n                                            </GridList>\r\n                                        </div>\r\n                                        {card.vaihtoehdot.map((listItem, listItemIndex) => (\r\n                                            <Fragment key={uuid()}>\r\n                                                <ListItem key={uuid()}><CodeComponent key={uuid()} style={{ width: \"100%\" }} questionString={listItem.vaihtoehto} /></ListItem>\r\n                                                <ListItem key={uuid()}>\r\n                                                    <ImageSelector key={uuid()}\r\n                                                        examIndex={currentExamIndex}\r\n                                                        cardIndex={cardIndex}\r\n                                                        listItemIndex={listItemIndex}\r\n                                                        sijainti=\"vaihtoehto\"\r\n                                                        setNewImageId={setNewImageId}\r\n                                                    />\r\n                                                    <GreenCheckbox checked={listItem.oikea_vastaus} color=\"primary\"\r\n                                                        onChange={(event) => {\r\n                                                            oikeaValintaMuuttui(dispatch, currentExamIndex, cardIndex, event.target.checked, listItem.id, listItemIndex, state[currentExamIndex].id)\r\n                                                        }} />\r\n                                                    <TextField multiline key={listItem.id} style={{\r\n                                                        minWidth: \"80%\", overflow: \"hidden\",\r\n                                                        textOverflow: \"ellipsis\"\r\n                                                    }} defaultValue={listItem.vaihtoehto}\r\n                                                        onBlur={(event) => {\r\n                                                            muutaVaihtoehto(dispatch, currentExamIndex, event.target.value, listItem.id, cardIndex, listItemIndex)\r\n                                                        }} />\r\n                                                    <IconButton style={{ float: \"right\" }} label=\"delete\" color=\"primary\"\r\n\r\n                                                        onClick={() => poistaVaihtoehdonLiitos(dispatch, currentExamIndex, listItem.id, cardIndex, card.id, listItemIndex)}>\r\n                                                        <DeleteIcon />\r\n                                                    </IconButton >\r\n                                                </ListItem>\r\n                                                <ListItem key={uuid()}>\r\n                                                    <div style={{ paddingLeft: \"45px\", width: \"100%\" }} className={classes.root}>\r\n                                                        <GridList cellHeight={150} style={{ width: \"100%\" }} className={classes.gridList}>\r\n                                                            <GridListTile key={uuid()} cols={2} style={{ height: 'auto' }}>\r\n                                                                <ListSubheader component=\"div\" style={{ width: \"100%\" }}>\r\n                                                                    {listItem.kuvat.length > 2 &&\r\n                                                                        <IconButton style={{ float: \"right\" }} aria-label=\"expand\"\r\n                                                                            onClick={() => {\r\n                                                                                showAllChoiseImages.includes(listItemIndex) ?\r\n                                                                                    setShowAllChoiseImages(showAllChoiseImages.filter(index => index !== listItemIndex))\r\n                                                                                    : setShowAllChoiseImages(showAllChoiseImages => [...showAllChoiseImages, listItemIndex])\r\n                                                                            }}>\r\n                                                                            <Badge badgeContent={showAllChoiseImages.includes(listItemIndex) ? 0 : listItem.kuvat.length - 2} color=\"primary\">\r\n                                                                                {showAllChoiseImages.includes(listItemIndex) ?\r\n                                                                                    <CloseIcon />\r\n                                                                                    : <ImageIcon />\r\n                                                                                }\r\n                                                                            </Badge>\r\n                                                                        </IconButton>\r\n                                                                    }\r\n                                                                </ListSubheader>\r\n                                                            </GridListTile>\r\n                                                            {listItem.kuvat.map((tile, tileIndex) => (\r\n                                                                (tileIndex < 2 || showAllChoiseImages.includes(listItemIndex)) && <GridListTile key={uuid()} style={{ width: \"240px\", maxHeight: \"150\" }}>\r\n                                                                    <a href={\"//localhost:4000/uploads/\" + tile.tiedostonimi} target=\"_blank\" rel=\"noreferrer\">\r\n                                                                        <img\r\n                                                                            style={{ width: \"100%\", height: \"100%\", objectFit: \"cover\", display: imageLoaded.includes(tile.id) ? \"block\" : \"none\" }}\r\n                                                                            src={\"//localhost:4000/uploads_thumbnails/thumbnail_\" + tile.tiedostonimi}\r\n                                                                            alt={tile.tiedostonimi}\r\n                                                                            /* loading=\"lazy\" */\r\n                                                                            onLoad={() => {\r\n                                                                                !imageLoaded.includes(tile.id)\r\n                                                                                    && setImageLoaded(imageLoaded => [...imageLoaded, tile.id])\r\n                                                                            }}\r\n                                                                            onError={(e) => { e.target.onerror = null; e.target.style.display = \"none\" }}\r\n                                                                        />\r\n                                                                    </a>\r\n                                                                    {!imageLoaded.includes(tile.id) ?\r\n                                                                        <Skeleton variant=\"rect\" width={512} height={512} />\r\n                                                                        : <GridListTileBar\r\n                                                                            title={<>\r\n                                                                                {<span>id: {tile.id}</span>}\r\n                                                                            </>}\r\n                                                                            subtitle={tile.tiedostonimi}\r\n                                                                            actionIcon={\r\n                                                                                <IconButton key={uuid()} style={{ color: \"white\", float: \"right\" }} label=\"delete\"\r\n                                                                                    color=\"primary\" onClick={() =>\r\n                                                                                        setNewImageId(poistaKuvanLiitos(dispatch, currentExamIndex, cardIndex, \"vaihtoehto\", tile.id, card.id, tileIndex, listItem.id, listItemIndex))\r\n                                                                                    }>\r\n                                                                                    <DeleteIcon />\r\n                                                                                </IconButton >\r\n                                                                            }\r\n                                                                        />}\r\n                                                                </GridListTile>\r\n                                                            ))}\r\n                                                        </GridList>\r\n                                                    </div>\r\n                                                </ListItem>\r\n                                            </Fragment>\r\n                                        ))}\r\n                                        <IconButton onClick={() => {\r\n                                            let kysymys_id = null\r\n                                            if (card.id) {\r\n                                                kysymys_id = card.id\r\n                                            } else {\r\n                                                kysymys_id = newCardId\r\n                                            }\r\n\r\n                                            setNewChoiseId(lisaaVaihtoehto(dispatch, cardIndex, kysymys_id, currentExamIndex))\r\n\r\n                                        }}>\r\n                                            <Icon>add_circle</Icon>\r\n                                        </IconButton>\r\n                                    </List>\r\n                                </CardContent>\r\n                            </Card>\r\n                        )\r\n                    }\r\n\r\n                    <div style={{ width: '100%', textAlign: 'center' }}>\r\n                        <IconButton\r\n                            onClick={() => {\r\n                                if (dataGridSelection.length > 0) {\r\n                                    console.log(dataGridSelection)\r\n                                    dataGridSelection.forEach((item, kysymysIndex) => {\r\n                                        setNewCardId(lisaaKysymysTenttiin(item, state[currentExamIndex].id))\r\n                                    })\r\n                                    setRows(rows.filter((row) => !dataGridSelection.includes(row.id)))\r\n                                    setDataGridSelection([])\r\n                                } else {\r\n                                    setNewCardId(lisaaKysymys(currentDatabaseExamIdChanged, dispatch, currentExamIndex))\r\n                                    setRows(rows.filter((row) => !dataGridSelection.includes(row.id)))\r\n                                }\r\n                            }\r\n                            }>\r\n                            <Icon>add_circle</Icon>\r\n                        </IconButton>\r\n                        <DeleteCardDialog\r\n                            currentExamIndex={currentExamIndex}\r\n                            dataGridSelection={dataGridSelection}\r\n                            setDataGridSelection={setDataGridSelection}\r\n                            setRows={setRows}\r\n                            rows={rows}\r\n                        />\r\n                    </div>\r\n                    <Card style={{ marginTop: \"10px\" }} className={classes.root}>\r\n                        <div style={{ height: 500, width: '100%' }}>\r\n                            <DataGrid columns={columns} rows={rows} pageSize={7} checkboxSelection\r\n                                onSelectionModelChange={(newSelection) => {\r\n                                    setDataGridSelection(newSelection.selectionModel)\r\n                                }}\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n\r\n                </Container>\r\n            </Box >\r\n            :\r\n            <Box key={uuid()}>\r\n                <CssBaseline key={uuid()} />\r\n                <Container key={uuid()} style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                    component=\"main\">\r\n                    {Object.values(state).map((exam, examIndex) =>\r\n                        <ExamButton style={{ marginTop: \"10px\" }} key={uuid()} name={exam.nimi} onClick={() => {\r\n                            setCurrentExamIndex(examIndex)\r\n                            if (exam.id) {\r\n                                setCurrentDatabaseExamIdChanged(exam.id)\r\n                                setCurrentExamId(exam.id)\r\n                                setExamName(exam.nimi)\r\n                                setRows(kysymysLista(examIndex))\r\n                            } else {\r\n                                setCurrentDatabaseExamIdChanged(newExamId)\r\n                            }\r\n                        }}>\r\n                            {exam.nimi}\r\n                        </ExamButton>\r\n                    )}\r\n                    <IconButton key={uuid()} onClick={() => {\r\n                        setNewExamId(lisaaTentti(dispatch, currentUser))\r\n                    }}>\r\n                        <Icon key={uuid()}> add_circle</Icon>\r\n                    </IconButton>\r\n                </Container>\r\n            </Box >)\r\n\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport { HorizontalBar } from 'react-chartjs-2'\r\nimport { strings } from './Locale'\r\n\r\nfunction getRandomInt (min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nconst data = {\r\n    labels: ['kivi', 'magmakivilajit', 'metaforiset kivilajit', 'javascript'],\r\n    datasets: [\r\n        {\r\n            label: '# oikeista vastauksista',\r\n            data: [getRandomInt(1, 10), getRandomInt(1, 10), getRandomInt(1, 10), getRandomInt(1, 10)],\r\n            backgroundColor: [\r\n                'rgba(255, 99, 132, 0.2)',\r\n                'rgba(54, 162, 235, 0.2)',\r\n                'rgba(75, 192, 192, 0.2)',\r\n                'rgba(255, 206, 86, 0.2)',\r\n            ],\r\n            borderColor: [\r\n                'rgba(255, 99, 132, 1)',\r\n                'rgba(54, 162, 235, 1)',\r\n                'rgba(75, 192, 192, 1)',\r\n                'rgba(255, 206, 86, 1)',\r\n            ],\r\n            borderWidth: 1,\r\n        },\r\n    ],\r\n}\r\n\r\nconst options = {\r\n    legend: {\r\n      display: true\r\n    },\r\n    scales: {\r\n      xAxes: [{\r\n        display: true,\r\n        ticks: {\r\n          min: 0\r\n        }\r\n      }],\r\n      yAxes: [{\r\n        display: true\r\n      }],\r\n    }\r\n  }\r\n\r\nconst HorizontalBarChart = () => (\r\n    <>\r\n        <div className='header'>\r\n            <h1 className='title'>1. {strings.esimerkki} {strings.kaavio}</h1>\r\n        </div>\r\n        <HorizontalBar data={data} options={options} />\r\n    </>\r\n)\r\n\r\nexport default HorizontalBarChart","import React from 'react'\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport { strings } from './Locale'\r\n\r\nfunction getRandomInt (min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min\r\n}\r\n\r\nconst data = {\r\n  labels: ['kivi', 'magmakivilajit', 'metaforiset kivilajit', 'javascript'],\r\n  datasets: [{\r\n    data: [getRandomInt(1, 3), getRandomInt(3, 5), getRandomInt(5, 7), getRandomInt(7, 10)],\r\n    backgroundColor: [\r\n      '#FF6384',\r\n      '#36A2EB',\r\n      '#FFCE56',\r\n      '#25CE56'\r\n    ],\r\n    hoverBackgroundColor: [\r\n      '#FF6384',\r\n      '#36A2EB',\r\n      '#FFCE56',\r\n      '#25CE56'\r\n    ]\r\n  }]\r\n}\r\n\r\nconst DoughnutChart = () => (\r\n  <>\r\n    <div className='header'>\r\n      <h1 className='title'>2. {strings.esimerkki} {strings.kaavio}</h1>\r\n    </div>\r\n    <Doughnut data={data} />\r\n  </>\r\n)\r\n\r\nexport default DoughnutChart\r\n","import { React } from 'react'\r\nimport {\r\n    Card, CardContent, Container, Box, CssBaseline\r\n} from '@material-ui/core'\r\nimport HorizontalBarChart from './HorizontalBarChart'\r\nimport DoughnutChart from './DoughnutChart'\r\n\r\n\r\nfunction Stats() {\r\n\r\n    return (\r\n        <>\r\n        <Box>\r\n            <CssBaseline />\r\n            <Container key=\"container1_user\" style={{ marginTop: \"80px\", marginBottom: \"15px\" }} maxWidth=\"lg\"\r\n                component=\"main\">\r\n                <Card style={{ marginTop: \"10px\" }}>\r\n                    <CardContent style={{ width: \"100%\" }} className=\"HorizontalBarChart\">\r\n                        <HorizontalBarChart />\r\n                    </CardContent>\r\n                </Card>\r\n                <Card style={{ marginTop: \"10px\" }}>\r\n                    <CardContent style={{ width: \"100%\" }} className=\"DoughnutChart\">\r\n                        <DoughnutChart />\r\n                    </CardContent>\r\n                </Card>\r\n            </Container>\r\n        </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Stats","import React, { useCallback } from 'react'\r\n/* import { strings } from './Locale' */\r\nimport { useDropzone } from 'react-dropzone'\r\nimport request from 'superagent'\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nfunction Upload() {\r\n    const onDrop = useCallback(files => {\r\n        const req = request.post(path+\"upload\");\r\n\r\n        files.forEach(file => {\r\n            req.attach('photos', file)\r\n        });\r\n        req.end((err, res) => {\r\n            console.log(res)\r\n        });\r\n\r\n    }, []);\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <>\r\n        <div name=\"photos\" key=\"photos\" style={{ paddingTop: \"60px\" }} {...getRootProps()}>\r\n            <input {...getInputProps()} />\r\n            {\r\n                isDragActive ?\r\n                    <p>Drop the files here ...</p> :\r\n                    <p>Drag 'n' drop some files here, or click to select files</p>\r\n            }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\nexport default Upload","import React, { useState } from 'react'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport axios from 'axios'\r\nimport { strings } from './Locale'\r\nimport {tarkistaSahkoposti,tarkistaSalasana} from './helpers.js';\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nconst Register = () => {\r\n\r\n    const [tempEtunimi, setTempEtunimi] = useState(\"\")\r\n    const [tempSukunimi, setTempSukunimi] = useState(\"\")\r\n    const [tempSahkoposti, setTempSahkoposti] = useState(\"\")\r\n    const [tempSalasana, setTempSalasana] = useState(\"\")\r\n    const [tempRooli, setTempRooli] = useState(\"user\")\r\n\r\n    const handleRadioButtons = (event) => {\r\n        setTempRooli(event.target.value)\r\n    }\r\n\r\n    const addUser = async () => {\r\n        if (tarkistaSahkoposti(tempSahkoposti)) {\r\n            if (tarkistaSalasana(tempSalasana)) {\r\n                try {\r\n                    let result = await axios.post(path+\"lisaa_kayttaja\", {\r\n                        etunimi: tempEtunimi,\r\n                        sukunimi: tempSukunimi,\r\n                        sahkoposti: tempSahkoposti,\r\n                        salasana_hash: tempSalasana,\r\n                        rooli: tempRooli\r\n                    })\r\n                    // if (result.lenght === 0){\r\n                    //     console.log(\"?????\")\r\n                    //     return\r\n                    // }\r\n                    console.log(result)\r\n                    alert(\"Käyttäjä lisätty onnistuneesti!\")\r\n                } catch (ex) {\r\n                    console.log(ex.message)\r\n                }\r\n            } else {\r\n                console.log(\"Salasana ei ole turvallinen!\")\r\n            }\r\n        } else {\r\n            console.log(\"Sähköposti ei kelpaa!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <Typography variant=\"h2\" component=\"h2\" style={{ paddingTop: \"60px\" }} className=\"h3 mb-3 font-weight-normal\">{strings.rekisteroidy}</Typography>\r\n            <Grid container spacing={1}>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"etunimi\"\r\n                        label={strings.etunimi}\r\n                        id=\"outlined-start-adornment1\"\r\n                        variant=\"outlined\"\r\n                        value={tempEtunimi}\r\n                        onChange={(event) => setTempEtunimi(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"sukunimi\"\r\n                        label={strings.sukunimi}\r\n                        id=\"outlined-start-adornment2\"\r\n                        variant=\"outlined\"\r\n                        value={tempSukunimi}\r\n                        onChange={(event) => setTempSukunimi(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"sahkoposti\"\r\n                        label={strings.sahkoposti}\r\n                        id=\"outlined-start-adornment3\"\r\n                        variant=\"outlined\"\r\n                        value={tempSahkoposti}\r\n                        onChange={(event) => setTempSahkoposti(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <FormControl variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"outlined-adornment-password\">{strings.salasana}</InputLabel>\r\n                        <OutlinedInput\r\n                            name=\"salasana\"\r\n                            id=\"outlined-adornment-password\"\r\n                            labelWidth={70}\r\n                            value={tempSalasana}\r\n                            type=\"password\"\r\n                            onChange={(event) => setTempSalasana(event.target.value)}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormLabel component=\"legend\">{strings.rooli}</FormLabel>\r\n                        <RadioGroup aria-label=\"rooli\" name=\"rooli1\" value={tempRooli} onChange={handleRadioButtons}>\r\n                            <FormControlLabel value=\"user\" control={<Radio />} label={strings.kayttaja} />\r\n                            <FormControlLabel value=\"admin\" control={<Radio />} label={strings.yllapitaja} />\r\n                        </RadioGroup>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <Button name=\"rekisteroidy_nappi\" onClick={addUser} type=\"submit\"\r\n                        className=\"btn btn-lg btn-primary btn-block\" variant=\"contained\" color=\"primary\">\r\n                        {strings.rekisteroidy}\r\n                    </Button>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\nexport default Register","import React, { useState } from 'react'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport { strings } from './Locale'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n    case 'production':\r\n        path = 'https://tentti-fullstack.herokuapp.com/'\r\n        break\r\n    case 'development':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    case 'test':\r\n        path = 'http://localhost:4000/'\r\n        break\r\n    default:\r\n        throw default_error\r\n}\r\n\r\nconst Login = ({kirjautunut,setKirjautunut}) => {\r\n    const [tempSahkoposti, setTempSahkoposti] = useState(\"\")\r\n    const [tempSalasana, setTempSalasana] = useState(\"\")\r\n    /* const [tempSalasanaUudestaan, setTempSalasanaUudestaan] = useState(\"\") */\r\n\r\n    const submitLogin = async (sah, sal) => {\r\n        // rakennetaan body axiosta varten\r\n        let body = {\r\n            sahkoposti: sah,\r\n            salasana: sal,\r\n        }\r\n        try {\r\n            await axios.post(path + \"kirjaudu/\", body).then(response => {\r\n                // tehdään post josta saadaan onnistuneessa kirjautumisessa response\r\n                // mistä tallennetaan datasta saatava token localStorageen\r\n                window.localStorage.setItem('jwtToken', response.data.token);\r\n                // alert(\"Kirjautuminen onnistui, tervetuloa \"+response.data.sahkoposti+\"!\")\r\n                setKirjautunut(true)\r\n            })\r\n        } catch (e) {\r\n            console.log(\"login error\", e)\r\n            alert(\"Tunnus tai salasana väärin!\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\">\r\n            <Typography variant=\"h2\" component=\"h2\" style={{ paddingTop: \"60px\" }} className=\"h3 mb-3 font-weight-normal\">{strings.kirjaudu}</Typography>\r\n            <Grid container spacing={1}>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <TextField\r\n                        name=\"sahkoposti\"\r\n                        label={strings.sahkoposti}\r\n                        id=\"outlined-start-adornment3\"\r\n                        variant=\"outlined\"\r\n                        value={tempSahkoposti}\r\n                        onChange={(event) => setTempSahkoposti(event.target.value)}\r\n                    />\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <FormControl variant=\"outlined\">\r\n                        <InputLabel htmlFor=\"outlined-adornment-password\">{strings.salasana}</InputLabel>\r\n                        <OutlinedInput\r\n                            name=\"salasana_hash\"\r\n                            id=\"outlined-adornment-password\"\r\n                            labelWidth={70}\r\n                            value={tempSalasana}\r\n                            type=\"password\"\r\n                            onChange={(event) => setTempSalasana(event.target.value)}\r\n                        />\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid style={{ padding: \"20px\" }} container item xs={12} spacing={3}>\r\n                    <Button onClick={() => submitLogin(tempSahkoposti, tempSalasana)} type=\"submit\"\r\n                        className=\"btn btn-lg btn-primary btn-block\" variant=\"contained\" color=\"primary\">\r\n                        {strings.kirjaudu}\r\n                    </Button>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    </>\r\n    )\r\n}\r\nexport default Login","import { AppBar, Toolbar, Typography, IconButton, MenuItem, Menu } from '@material-ui/core'\r\nimport AccountCircle from '@material-ui/icons/AccountCircle'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport { Link } from 'react-router-dom';\r\nimport { useStyles, MenuButton } from './Style'\r\nimport { strings } from './Locale'\r\nimport { React, useState, useContext } from 'react'\r\nimport { logoutUser } from './axiosreqs'\r\nimport { store } from './store.js'\r\n\r\nexport function NavBar({\r\n    setKirjautunut,\r\n    currentUser,\r\n    setCurrentUser,\r\n    currentUserName,\r\n    setCurrentUserName,\r\n    setCurrentExamId,\r\n    currentExamIndex,setCurrentExamIndex,\r\n    examEdit,setExamEdit,\r\n    kaikkiKysymykset, rows, setRows\r\n}) {\r\n    const classes = useStyles()\r\n    const { dispatch } = useContext(store) \r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const isOpen = Boolean(anchorEl);\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    // strings.setLanguage(strings.getInterfaceLanguage())\r\n    // console.log(\"Browser language in Settings: \" + strings.getInterfaceLanguage())\r\n    // console.log(\"React App language: \" + strings.getLanguage())\r\n\r\n        return (\r\n            <>\r\n                <AppBar position=\"fixed\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            {(examEdit || window.location.pathname===\"/admin\")?\r\n                            <Link style={{ textDecoration: 'none' }} to=\"/admin\" ><MenuButton name=\"tentit\" onClick={()=>{\r\n                                if (currentExamIndex >=0) {\r\n                                    setCurrentExamIndex(-1)\r\n                                    setCurrentExamId(-1)\r\n                                    setRows(kaikkiKysymykset)\r\n                                }\r\n                            }}>{strings.tentit}</MenuButton></Link>\r\n                            :\r\n                            <Link style={{ textDecoration: 'none' }} to=\"/user\" ><MenuButton name=\"tentit\" onClick={()=>{\r\n                                if (currentExamIndex >=0) {\r\n                                    setCurrentExamIndex(-1)\r\n                                    setCurrentExamId(-1)\r\n                                    setRows(kaikkiKysymykset)\r\n                                }\r\n                            }}>{strings.tentit}</MenuButton></Link> }\r\n                        {/* {window.location.pathname===\"/admin\"?\r\n                                <MenuButton name=\"tentit\" href=\"/admin\">{strings.tentit}</MenuButton>\r\n                            :\r\n                                <MenuButton name=\"tentit\" href=\"/user\">{strings.tentit}</MenuButton>\r\n                            } */}\r\n                            <Link style={{ textDecoration: 'none' }} to=\"/stats\" ><MenuButton name=\"tilastot\">{strings.tilastot}</MenuButton></Link>\r\n                            <Link style={{ textDecoration: 'none' }} to=\"/upload\"><MenuButton name=\"tiedostonlahetys\">{strings.tiedostonlahetys}</MenuButton></Link>\r\n                            <MenuButton name=\"tietoa\" target=\"_blank\" href=\"https://www.youtube.com/watch?v=sAqnNWUD79Q\">\r\n                                {strings.tietoa}\r\n                            </MenuButton>\r\n                        </Typography>\r\n                        {/* <MenuButton name=\"user\" href=\"/user\" style={{ backgroundColor: \"white\", color: \"blue\", marginRight: \"10px\" }}>{strings.kayttaja}</MenuButton>\r\n                        <MenuButton name=\"admin\" href=\"/admin\" style={{ backgroundColor: \"white\", color: \"red\" }}>{strings.yllapitaja}</MenuButton> */}\r\n                        {/* <MenuButton name=\"kieli\" onClick={() => vaihdetaanKieli()}>{strings.kieli + \"(\" + strings.getLanguage() + \")\"}</MenuButton> */}\r\n                        { examEdit || window.location.pathname===\"/admin\"? \r\n                            <Link style={{ textDecoration: 'none' }} to=\"/user\" >\r\n                                <IconButton color='secondary' onClick={() => {\r\n                                    setExamEdit(false)}}><EditIcon/>\r\n                                </IconButton>\r\n                            </Link> :\r\n                            <Link style={{ textDecoration: 'none' }} to=\"/admin\" >\r\n                                <IconButton color=\"default\" onClick={() => {\r\n                                    setExamEdit(true)}}><EditIcon/>\r\n                                </IconButton>\r\n                            </Link>} \r\n                        <IconButton aria-label=\"account of current user\"\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\" \r\n                                onClick={handleMenu} \r\n                                color=\"inherit\">\r\n                            <AccountCircle/>\r\n                        </IconButton>\r\n                        <Menu   id= 'menu-appbar' \r\n                                anchorEl={anchorEl}\r\n                                anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n                                // keepMounted\r\n                                transformOrigin={{ vertical: 'top', horizontal: 'right' }} \r\n                                open={isOpen} \r\n                                onClose={handleClose}>\r\n                            <MenuItem disabled style={{justifyContent: 'center'}} ><AccountCircle/></MenuItem >\r\n                            <MenuItem disabled><strong>{currentUserName}</strong></MenuItem>\r\n                            <MenuItem onClick={() =>{} }>{strings.omatTentit}</MenuItem>\r\n                            <MenuItem onClick={() =>{\r\n                                    window.localStorage.removeItem('jwtToken')\r\n                                    setKirjautunut(false)\r\n                                    logoutUser(dispatch)\r\n                                    setCurrentUser(\"\")\r\n                                    setCurrentUserName(\"\")\r\n                                    setAnchorEl(null)\r\n                                }}>{strings.poistu}\r\n                            </MenuItem>\r\n                        </Menu>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </>\r\n        )\r\n}","import { AppBar, Toolbar, Typography } from '@material-ui/core'\r\nimport { useStyles, MenuButton } from './Style'\r\nimport { strings } from './Locale'\r\nimport { React } from 'react'\r\n\r\nexport function NavBarLogin() {\r\n    const classes = useStyles()\r\n \r\n    strings.setLanguage(strings.getInterfaceLanguage())\r\n    console.log(\"Browser language in Settings: \" + strings.getInterfaceLanguage())\r\n    console.log(\"React App language: \" + strings.getLanguage())\r\n\r\n        \r\n        return (\r\n            <>\r\n                <AppBar position=\"fixed\">\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            <MenuButton name=\"rekisteroidy\" href=\"/register\">{strings.rekisteroidy}</MenuButton>\r\n                            <MenuButton name=\"kirjaudu\" href=\"/login\">{strings.kirjaudu}</MenuButton>\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </>\r\n        )\r\n    }","\r\nimport { useState, useEffect } from 'react'\r\nimport User from './User'\r\nimport Admin from './Admin'\r\nimport Stats from './Stats'\r\nimport Upload from './Upload'\r\nimport Register from './Register'\r\nimport Login from './Login'\r\nimport { NavBar } from './NavBar'\r\nimport { NavBarLogin } from './NavBarLogin'\r\nimport { Route, Switch/* , Redirect */ } from 'react-router-dom'\r\nimport { autentikoitu } from './helpers'\r\nimport { fetchUser, kysymysJaAihe } from './axiosreqs'\r\n\r\nexport const Routes = () => {\r\n    const [kirjautunut, setKirjautunut] = useState(false)\r\n    const [currentUser, setCurrentUser] = useState(\"\")\r\n    const [currentUserName, setCurrentUserName] = useState(\"\")\r\n    const [currentExamIndex,setCurrentExamIndex] = useState(-1)\r\n    const [currentExamId, setCurrentExamId] = useState(-1)\r\n    const [examEdit,setExamEdit] = useState(false)\r\n    const [kaikkiKysymykset, setKaikkiKysymykset] = useState([])\r\n    const [rows, setRows] = useState([])\r\n\r\n\r\n    // autentikoidun paluuarvo on joko token tai false\r\n    useEffect(() => {\r\n        let paluuarvo = autentikoitu()\r\n\r\n        if (paluuarvo) {\r\n            setKirjautunut(true)\r\n            fetchUser(setCurrentUser, setCurrentUserName, paluuarvo)\r\n            kysymysJaAihe(setKaikkiKysymykset)\r\n        }\r\n    },[kirjautunut])\r\n     \r\n    // tarkistetaanko kirjautumisen tila tokenista ja asetetaan tähän arvoksi?\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {kirjautunut ?\r\n                <>\r\n                <NavBar setKirjautunut={setKirjautunut}\r\n                currentUser={currentUser} \r\n                setCurrentUser={setCurrentUser}\r\n                currentUserName={currentUserName}\r\n                setCurrentUserName={setCurrentUserName} \r\n                currentExamId={currentExamId} setCurrentExamId={setCurrentExamId}\r\n                currentExamIndex={currentExamIndex} setCurrentExamIndex={setCurrentExamIndex} \r\n                examEdit={examEdit} setExamEdit={setExamEdit}\r\n                kaikkiKysymykset={kaikkiKysymykset} setKaikkiKysymykset={setKaikkiKysymykset} \r\n                rows={rows} setRows={setRows}/>\r\n                <Switch>\r\n                    <Route exact path=\"/login\">\r\n                    <User currentUser={currentUser} \r\n                        currentExamId={currentExamId} setCurrentExamId={setCurrentExamId}\r\n                        currentExamIndex={currentExamIndex} setCurrentExamIndex={setCurrentExamIndex} \r\n                        kaikkiKysymykset={kaikkiKysymykset} rows={rows} setRows={setRows}\r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/user\">\r\n                    <User currentUser={currentUser} \r\n                        currentExamId={currentExamId} setCurrentExamId={setCurrentExamId}\r\n                        currentExamIndex={currentExamIndex} setCurrentExamIndex={setCurrentExamIndex}\r\n                        kaikkiKysymykset={kaikkiKysymykset} rows={rows} setRows={setRows} \r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/admin\">\r\n                        <Admin currentUser={currentUser} \r\n                        currentExamId={currentExamId} setCurrentExamId={setCurrentExamId}\r\n                        currentExamIndex={currentExamIndex} setCurrentExamIndex={setCurrentExamIndex}\r\n                        kaikkiKysymykset={kaikkiKysymykset} setKaikkiKysymykset={setKaikkiKysymykset}\r\n                        rows={rows} setRows={setRows} \r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                    <User currentUser={currentUser} \r\n                        currentExamId={currentExamId} setCurrentExamId={setCurrentExamId}\r\n                        currentExamIndex={currentExamIndex} setCurrentExamIndex={setCurrentExamIndex}\r\n                        kaikkiKysymykset={kaikkiKysymykset} rows={rows} setRows={setRows} \r\n                        />\r\n                    </Route>\r\n                    <Route exact path=\"/stats\">\r\n                        <Stats />\r\n                    </Route>\r\n                    <Route exact path=\"/upload\">\r\n                        <Upload />\r\n                    </Route>\r\n                    {/* <Route exact path=\"*\">\r\n                        <User currentUser={currentUser} setCurrentUser={setCurrentUser} \r\n                        setCurrentUserName={setCurrentUserName}\r\n                        currentExamId={currentExamId} setCurrentExamId={setCurrentExamId}\r\n                        currentExamIndex={currentExamIndex} setCurrentExamIndex={setCurrentExamIndex} \r\n                        />\r\n                    </Route> */}\r\n                </Switch>\r\n                </>\r\n                :\r\n                <>\r\n                <NavBarLogin />\r\n                <Switch>\r\n                    <Route exact path=\"/register\">\r\n                        <Register />\r\n                    </Route>\r\n                    <Route exact path=\"*\">\r\n                        <Login kirjautunut={kirjautunut} setKirjautunut={setKirjautunut}/>\r\n                    </Route>\r\n                    {/* <Route exact path=\"/login\">\r\n                        <Login kirjautunut={kirjautunut} setKirjautunut={setKirjautunut}/>\r\n                    </Route>\r\n                    <Route exact path=\"/\">\r\n                        <Login kirjautunut={kirjautunut} setKirjautunut={setKirjautunut}/>\r\n                    </Route> */}\r\n                </Switch>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nimport ReactDOM from 'react-dom'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Routes } from './components/Routes' // where we are going to specify our routes\r\nimport io from 'socket.io-client'\r\nimport Swal from 'sweetalert2'\r\nimport { StateProvider } from './components/store.js';\r\nimport { MainProvider } from './components/globalContext.js';\r\n\r\n// null\r\nvar path = null\r\nvar default_error = new Error(\"Environment not properly set!\")\r\nlet environment = process.env.NODE_ENV || 'development'\r\n\r\nswitch (environment) {\r\n  case 'production':\r\n    path = 'https://tentti-fullstack.herokuapp.com'\r\n    break\r\n  case 'development':\r\n    // kuunnellaan serveriä portissa 4000\r\n    path = 'http://localhost:4000'\r\n    break\r\n  case 'test':\r\n    path = 'http://localhost:4000'\r\n    break\r\n  default:\r\n    throw default_error\r\n}\r\n\r\nconsole.log(\"WebSocket kuuntelee ilmoituksia\")\r\nlet socket = io(path)\r\nsocket.on('connected', function (data) {\r\n  socket.emit('ready for data', {})\r\n});\r\nsocket.on('update', function (data) {\r\n\r\n  const alert_data = JSON.parse(data.message.payload)\r\n  console.log(\"Trigger: \" + alert_data.trigger)\r\n  switch (alert_data.trigger) {\r\n    case 'insert_tentti':\r\n      console.log('Uusi tentti ' + alert_data.row.nimi + ' lisätty!')\r\n      Swal.fire({\r\n        title: '<strong>Uusi tentti <i>' + alert_data.row.nimi + '</i> lisätty!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>suoritettu:</b>\\t\\t' + alert_data.row.suoritettu + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '<b>minimipisteraja:</b>\\t' + alert_data.row.minimipisteraja +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'success',\r\n      })\r\n      break\r\n    case 'delete_tentti':\r\n      console.log('Tentti ' + alert_data.row.nimi + ' poistettu!')\r\n      Swal.fire({\r\n        title: '<strong>Tentti <i>' + alert_data.row.nimi + '</i> poistettu!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>suoritettu:</b>\\t\\t' + alert_data.row.suoritettu + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '<b>minimipisteraja:</b>\\t' + alert_data.row.minimipisteraja +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'warning',\r\n      })\r\n      break\r\n    case 'insert_kurssi':\r\n      console.log('Uusi kurssi ' + alert_data.row.nimi + ' lisätty!')\r\n      Swal.fire({\r\n        title: '<strong>Uusi kurssi <i>' + alert_data.row.nimi + '</i> lisätty!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'success',\r\n      })\r\n      break\r\n    case 'delete_kurssi':\r\n      console.log('Kurssi ' + alert_data.row.nimi + ' poistettu!')\r\n      Swal.fire({\r\n        title: '<strong>Kurssi <i>' + alert_data.row.nimi + '</i> poistettu!</strong>',\r\n        html: '<pre style=\"text-align: left;\">' +\r\n          '<b>id:</b>\\t\\t\\t' + alert_data.row.id + '<br/>' +\r\n          '<b>nimi:</b>\\t\\t\\t' + alert_data.row.nimi + '<br/>' +\r\n          '<b>aloitus:</b>\\t\\t' + alert_data.row.aloitus + '<br/>' +\r\n          '<b>lopetus:</b>\\t\\t' + alert_data.row.lopetus + '<br/>' +\r\n          '</pre>',\r\n        timer: 10000,\r\n        timerProgressBar: true,\r\n        position: 'bottom-end',\r\n        icon: 'warning',\r\n      })\r\n      break\r\n    default:\r\n      console.log(\"Jotain meni pahasti pieleen...\")\r\n      break\r\n  }\r\n\r\n})\r\n\r\nReactDOM.render(\r\n  <MainProvider>\r\n    <StateProvider>\r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n    </StateProvider>\r\n  </MainProvider>,\r\n  document.getElementById('root')\r\n)"],"sourceRoot":""}